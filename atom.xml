<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lyhcc博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lyhcc.github.io/"/>
  <updated>2020-04-02T14:30:07.619Z</updated>
  <id>https://lyhcc.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>创建型设计模式</title>
    <link href="https://lyhcc.github.io/post/fcd38b5a.html"/>
    <id>https://lyhcc.github.io/post/fcd38b5a.html</id>
    <published>2020-04-02T04:06:50.257Z</published>
    <updated>2020-04-02T14:30:07.619Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#dan-li-mo-shi">单例模式</a><ul><li><a href="#dan-li-she-ji-mo-shi-jie-shao">单例设计模式介绍</a></li><li><a href="#dan-li-mo-shi-zai-jdk-zhong-de-ying-yong">单例模式在JDK中的应用</a></li><li><a href="#dan-li-mo-shi-zhu-yi-shi-xiang-he-xi-jie-shuo-ming">单例模式注意事项和细节说明</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="dan-li-mo-shi">单例模式</span><a href="#dan-li-mo-shi" class="header-anchor">$</a></h2><h3><span id="dan-li-she-ji-mo-shi-jie-shao">单例设计模式介绍</span><a href="#dan-li-she-ji-mo-shi-jie-shao" class="header-anchor">$</a></h3><blockquote><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，<font color="red">对某个类只能存在一个对象实例</font>，并且该类只提供一个取得其对象实例的方法(静态方法)。<br>比如Hibernate的SessionFactory，它充当数据存储源的代理，并负责创建Session对象。 SessionFactory并不是轻量级的，一般情况下，一个项目通常只需要一个SessionFactory就够，这是就会使用到单例模式。</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">单例模式有八种方式：</span><br><span class="line">    1) 饿汉式(静态常量)</span><br><span class="line">    2) 饿汉式（静态代码块）</span><br><span class="line">        3) 懒汉式(线程不安全)</span><br><span class="line">        4) 懒汉式(线程安全，同步方法)</span><br><span class="line">        5) 懒汉式(线程安全，同步代码块)</span><br><span class="line">    6) 双重检查</span><br><span class="line">    7) 静态内部类</span><br><span class="line">    8) 枚举</span><br></pre></td></tr></table></figure><h4><span id="e-han-shi-jing-tai-chang-liang">饿汉式(静态常量)</span><a href="#e-han-shi-jing-tai-chang-liang" class="header-anchor">$</a></h4><ol><li>构造器私有化</li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>优缺点说明：</strong>  </p><ol><li>优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。</li><li>缺点：在类装载的时候就完成实例化，<font color="red">没有达到Lazy Loading的效果</font>。如果从始至终从未使用过这个实例，则会<font color="red">造成内存的浪费</font></li><li>这种方式基于classloder机制避免了多线程的同步问题，不过， instance在类装载时就实例化，在单例模式中大多数都是调用getInstance方法， 但是导致类装载的原因有很多种， 因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance就没有达到lazy loading的效果</li><li>结论：这种单例模式可用， 可能造成内存浪费</li></ol><h4><span id="e-han-shi-jing-tai-dai-ma-kuai-ying-yong-shi-li">饿汉式（静态代码块）应用实例</span><a href="#e-han-shi-jing-tai-dai-ma-kuai-ying-yong-shi-li" class="header-anchor">$</a></h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> Singleton instance;</span><br><span class="line"><span class="hljs-keyword">static</span> &#123; </span><br><span class="line">instance = <span class="hljs-keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优缺点说明：</strong>  </p><p>1) 这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。<br>2) 结论： 这种单例模式可用，但是可能造成内存浪费</p><h4><span id="lan-han-shi-xian-cheng-bu-an-quan">懒汉式(线程不安全)</span><a href="#lan-han-shi-xian-cheng-bu-an-quan" class="header-anchor">$</a></h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="hljs-keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优缺点说明：</strong>    </p><p>1) 起到了Lazy Loading的效果，但是只能在单线程下使用。<br>2) 如果在多线程下，一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在<font color="red">多线程环境下不可使用</font>这种方式<br>3) 结论：在实际开发中，<font color="red">不要使用这种方式</font></p><h4><span id="lan-han-shi-xian-cheng-an-quan-tong-bu-fang-fa">懒汉式(线程安全，同步方法)</span><a href="#lan-han-shi-xian-cheng-an-quan-tong-bu-fang-fa" class="header-anchor">$</a></h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="hljs-keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点说明：</p><p>1) 解决了线程不安全问题<br>2) <font color="red">效率太低</font>了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低<br>3) 结论： 在实际开发中， <font color="red">不推荐使用这种方式</font></p><h4><span id="lan-han-shi-xian-cheng-an-quan-tong-bu-dai-ma-kuai">懒汉式(线程安全，同步代码块)</span><a href="#lan-han-shi-xian-cheng-an-quan-tong-bu-dai-ma-kuai" class="header-anchor">$</a></h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">    instance = <span class="hljs-keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优缺点说明：</strong>  </p><p>1) 这种方式，本意是想对第四种实现方式的改进，因为前面同步方法效率太低，改为同步产生实例化的的代码块<br>2) 但是这种同步并<font color="red">不能起到线程同步的作用</font>。跟第3种实现方式遇到的情形一致，假如一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例<br>3) 结论：在实际开发中， <font color="red">不能使用这种方式</font></p><h4><span id="shuang-chong-jian-cha">双重检查</span><a href="#shuang-chong-jian-cha" class="header-anchor">$</a></h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton instance;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="hljs-keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>volatile关键字在Java中，实现变量共享，当一个变量被多个线程使用时，且有一个线程修改，会立刻刷新到主存中，已达到数据同步的效果</p></blockquote><p><strong>优缺点说明：</strong>  </p><p>1) Double-Check概念是多线程开发中常使用到的， 如代码中所示，我们进行了两次if (singleton == null)检查，这样就可以保证线程安全了。<br>2) 这样，实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)，直接return实例化对象，也避免的反复进行方法同步.<br>3) 线程安全；延迟加载；效率较高<br>4) 结论：在实际开发中，<font color="red">推荐使用</font>这种单例设计模式</p><h4><span id="jing-tai-nei-bu-lei">静态内部类</span><a href="#jing-tai-nei-bu-lei" class="header-anchor">$</a></h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonInstance</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE = <span class="hljs-keyword">new</span> Singleton(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优缺点说明：</strong>  </p><p>1) 这种方式采用了类装载的机制来保证初始化实例时只有一个线程。<br>2) <font color="red">静态内部类方式在Singleton类被装载时并不会立即实例化</font>，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。<br>3) 类的静态属性只会在第一次加载类的时候初始化，所以在这里， JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。<br>4) 优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高<br>5) 结论：<font color="red">推荐使用</font></p><h4><span id="mei-ju">枚举</span><a href="#mei-ju" class="header-anchor">$</a></h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">enum</span> Singleton &#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"Hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优缺点说明：</strong></p><p>1) 这借助JDK1.5中添加的枚举来实现单例模式。不仅<font color="red">能避免多线程同步</font>问题，而且还<font color="red">能防止反序列化重新创建新的对象</font>。<br>2) 这种方式是Effective Java作者Josh Bloch 提倡的方式<br>3) 结论：<font color="red">推荐使用</font></p><h3><span id="dan-li-mo-shi-zai-jdk-zhong-de-ying-yong">单例模式在JDK中的应用</span><a href="#dan-li-mo-shi-zai-jdk-zhong-de-ying-yong" class="header-anchor">$</a></h3><blockquote><p>我们JDK中， java.lang.Runtime就是经典的单例模式(饿汉式)<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200402222751.png" alt></p></blockquote><h3><span id="dan-li-mo-shi-zhu-yi-shi-xiang-he-xi-jie-shuo-ming">单例模式注意事项和细节说明</span><a href="#dan-li-mo-shi-zhu-yi-shi-xiang-he-xi-jie-shuo-ming" class="header-anchor">$</a></h3><p>1) 单例模式保证了 系统内存中该类<font color="red">只存在一个对象</font>，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以<font color="red">提高系统性能</font><br>2) 当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不使用new<br>3) 单例模式使用的场景：需要<mark>频繁的进行创建和销毁的对象</mark>、<mark>创建对象时耗时过或耗费资源过多</mark>(即：重量级对象)， 但<mark>又经常用到的对象、工具类对象、频繁访问数据库或文件的对象</mark>(比如数据源、 session工厂等)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#dan-li-mo-shi&quot;&gt;单例模式&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#dan-li-she-ji-mo-shi-jie-shao&quot;&gt;单例设计模式介绍&lt;/a&gt;&lt;/l
      
    
    </summary>
    
    
      <category term="Java设计模式" scheme="https://lyhcc.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="创建型设计模式" scheme="https://lyhcc.github.io/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式之设计模式七大原则</title>
    <link href="https://lyhcc.github.io/post/7e3cde45.html"/>
    <id>https://lyhcc.github.io/post/7e3cde45.html</id>
    <published>2020-03-20T01:35:36.311Z</published>
    <updated>2020-03-30T09:39:33.690Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#dan-yi-zhi-ze-yuan-ze">单一职责原则</a><ul><li><a href="#ji-ben-jie-shao">基本介绍</a></li><li><a href="#ying-yong-shi-li">应用实例</a></li><li><a href="#dan-yi-zhi-ze-yuan-ze-zhu-yi-shi-xiang-he-xi-jie">单一职责原则注意事项和细节</a></li></ul></li><li><a href="#jie-kou-ge-chi-yuan-ze">接口隔离原则</a><ul><li><a href="#ying-yong-shi-li-1">应用实例</a></li><li><a href="#ying-chuan-tong-fang-fa-de-wen-ti-he-shi-yong-jie-kou-ge-chi-yuan-ze-gai-jin">应传统方法的问题和使用接口隔离原则改进</a></li></ul></li><li><a href="#yi-lai-dao-zhuan-yuan-ze">依赖倒转原则</a><ul><li><a href="#ji-ben-jie-shao-1">基本介绍</a></li><li><a href="#ying-yong-shi-li-2">应用实例</a></li><li><a href="#yi-lai-zhuan-huan-yuan-ze-de-zhu-yi-shi-xiang-he-xi-jie">依赖转换原则的注意事项和细节</a></li></ul></li><li><a href="#li-shi-ti-huan-yuan-ze">里氏替换原则</a><ul><li><a href="#oo-zhong-de-ji-cheng-xing-de-si-kao-he-shuo-ming">OO中的继承性的思考和说明</a></li><li><a href="#ji-ben-jie-shao-2">基本介绍</a></li><li><a href="#yi-ge-cheng-xu-yin-chu-wen-ti-si-kao">一个程序引出问题思考</a></li></ul></li><li><a href="#kai-bi-yuan-ze">开闭原则</a><ul><li><a href="#ji-ben-jie-shao-3">基本介绍</a></li><li><a href="#kan-xia-mian-yi-duan-dai-ma">看下面一段代码</a></li><li><a href="#dai-ma-gai-jin-gai-jin">代码改进改进</a></li></ul></li><li><a href="#di-mi-te-fa-ze">迪米特法则</a><ul><li><a href="#ji-ben-jie-shao-4">基本介绍</a></li><li><a href="#ying-yong-shi-li-3">应用实例</a></li><li><a href="#ying-yong-shi-li-gai-jin">应用实例改进</a></li><li><a href="#di-mi-te-fa-ze-zhu-yi-shi-xiang-he-xi-jie">迪米特法则注意事项和细节</a></li></ul></li><li><a href="#he-cheng-fu-yong-yuan-ze-composite-reuse-principle">合成复用原则（Composite Reuse Principle）</a><ul><li><a href="#ji-ben-jie-shao-5">基本介绍</a></li></ul></li></ul><!-- tocstop --></div><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200330173922.png" alt></p><h2><span id="dan-yi-zhi-ze-yuan-ze">单一职责原则</span><a href="#dan-yi-zhi-ze-yuan-ze" class="header-anchor">$</a></h2><h3><span id="ji-ben-jie-shao">基本介绍</span><a href="#ji-ben-jie-shao" class="header-anchor">$</a></h3><blockquote><p>对类来说的，即一个类应该只负责一项职责。如类A负责两个不同职责：职责1，职责2。<br>当职责1需求变更而改变A时，可能造成职责2执行错误， 所以需要将类A的粒度分解为A1， A2</p></blockquote><a id="more"></a><h3><span id="ying-yong-shi-li">应用实例</span><a href="#ying-yong-shi-li" class="header-anchor">$</a></h3><ol><li>以水果类为例</li><li>方案一<blockquote><ol><li>在方式1中的eat方法中，违反了单一职责原则</li><li>解决方案非常简单，根据水果的方法不同，分解成不同的类</li></ol></blockquote></li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleResposibility01</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">Fruit fruit = <span class="hljs-keyword">new</span> Fruit();</span><br><span class="line">fruit.eat(<span class="hljs-string">"苹果"</span>);</span><br><span class="line">fruit.eat(<span class="hljs-string">"葡萄"</span>);</span><br><span class="line">fruit.eat(<span class="hljs-string">"菠萝"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fruit</span></span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">(String fruit)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"正在红色的"</span> + fruit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>方案二<blockquote><ol><li>遵守单一职责原则</li><li>但是这样做的改动很多大，即将类的分解同时更改客户端</li></ol></blockquote></li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleResponsibility02</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">RedFriut redFriut = <span class="hljs-keyword">new</span> RedFriut();</span><br><span class="line">redFriut.eat(<span class="hljs-string">"苹果"</span>);</span><br><span class="line">GreenFruit greenFruit = <span class="hljs-keyword">new</span> GreenFruit();</span><br><span class="line">greenFruit.eat(<span class="hljs-string">"葡萄"</span>);</span><br><span class="line">YellowFruit yellowFruit = <span class="hljs-keyword">new</span> YellowFruit();</span><br><span class="line">yellowFruit.eat(<span class="hljs-string">"菠萝"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedFriut</span></span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">(String fruit)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"正在红色的"</span> + fruit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GreenFruit</span></span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">(String fruit)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"正在绿色的"</span> + fruit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YellowFruit</span></span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">(String fruit)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"正在黄色的"</span> + fruit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>方案三<blockquote><ol><li>这种修改方法没有对原来的类做大的修改，只是增加方法</li><li>这里虽然没有在类这个级别上遵守单一职责原则，但在方法级别上仍然是遵守单一职责原则</li></ol></blockquote></li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleResposibility03</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyFruit fruit = <span class="hljs-keyword">new</span> MyFruit();</span><br><span class="line">fruit.eatRedFruit(<span class="hljs-string">"苹果"</span>);</span><br><span class="line">fruit.eatGreenFruit(<span class="hljs-string">"葡萄"</span>);</span><br><span class="line">fruit.eatYellowFruit(<span class="hljs-string">"菠萝"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFruit</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eatRedFruit</span><span class="hljs-params">(String Fruit)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"正在吃红色的"</span> + Fruit);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eatGreenFruit</span><span class="hljs-params">(String Fruit)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"正在吃绿色的"</span> + Fruit);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eatYellowFruit</span><span class="hljs-params">(String Fruit)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"正在吃黄色的"</span> + Fruit);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="dan-yi-zhi-ze-yuan-ze-zhu-yi-shi-xiang-he-xi-jie">单一职责原则注意事项和细节</span><a href="#dan-yi-zhi-ze-yuan-ze-zhu-yi-shi-xiang-he-xi-jie" class="header-anchor">$</a></h3><ol><li>降低类的复杂度，一个类只负责一项职责。</li><li>提高类的可读性，可维护性</li><li>降低变更引起的风险</li><li>通常情况下， 我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一职责原则</li></ol><h2><span id="jie-kou-ge-chi-yuan-ze">接口隔离原则</span><a href="#jie-kou-ge-chi-yuan-ze" class="header-anchor">$</a></h2><h3><span id="ying-yong-shi-li">应用实例</span><a href="#ying-yong-shi-li" class="header-anchor">$</a></h3><blockquote><p>类A通过接口Interface1依赖类C，<br>类B通过接口Interface1依赖类D，<br>请编写代码完成此应用实例<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200320105610.png" alt></p></blockquote><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">interface1</span></span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method5</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">interface1</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"C 实现了接口1的方法1"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"C 实现了接口1的方法2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"C 实现了接口1的方法3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"C 实现了接口1的方法4"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method5</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"C 实现了接口1的方法5"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">interface1</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"D 实现了接口1的方法1"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"D 实现了接口1的方法2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"D 实现了接口1的方法3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"D 实现了接口1的方法4"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method5</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"D 实现了接口1的方法5"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend1</span><span class="hljs-params">(interface1 i)</span> </span>&#123;</span><br><span class="line">i.method1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend2</span><span class="hljs-params">(interface1 i)</span> </span>&#123;</span><br><span class="line">i.method2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend3</span><span class="hljs-params">(interface1 i)</span> </span>&#123;</span><br><span class="line">i.method3();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend1</span><span class="hljs-params">(interface1 i)</span> </span>&#123;</span><br><span class="line">i.method1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend4</span><span class="hljs-params">(interface1 i)</span> </span>&#123;</span><br><span class="line">i.method4();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend5</span><span class="hljs-params">(interface1 i)</span> </span>&#123;</span><br><span class="line">i.method5();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="ying-chuan-tong-fang-fa-de-wen-ti-he-shi-yong-jie-kou-ge-chi-yuan-ze-gai-jin">应传统方法的问题和使用接口隔离原则改进</span><a href="#ying-chuan-tong-fang-fa-de-wen-ti-he-shi-yong-jie-kou-ge-chi-yuan-ze-gai-jin" class="header-anchor">$</a></h3><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200320104727.png" alt></p><ol><li>类A通过接口Interface1依赖类B，类C通过接口Interface1依赖类D，如果接口<br>Interface1对于类A和类B来说不是最小接口，那么类C和类D必须去实现他们不<br>需要的方法</li><li>将接口Interface1拆分为独立的几个接口，类A和类B分别与他们需要的接口建立<br>依赖关系。也就是采用接口隔离原则</li><li>接口Interface1中出现的方法，根据实际情况拆分为三个接口</li><li>代码实现<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Segregation</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">A a = <span class="hljs-keyword">new</span> A();</span><br><span class="line">C c = <span class="hljs-keyword">new</span> C();</span><br><span class="line">a.depend1(c);</span><br><span class="line">a.depend2(c);</span><br><span class="line">a.depend3(c);</span><br><span class="line"></span><br><span class="line">B b = <span class="hljs-keyword">new</span> B();</span><br><span class="line">D d = <span class="hljs-keyword">new</span> D();</span><br><span class="line">b.depend1(d);</span><br><span class="line">b.depend4(d);</span><br><span class="line">b.depend5(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">interface1</span></span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">interface2</span></span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">interface3</span></span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method5</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">interface1</span>,<span class="hljs-title">interface2</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"C 实现了接口1的方法1"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"C 实现了接口2的方法2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"C 实现了接口2的方法3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">interface1</span>,<span class="hljs-title">interface3</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"D 实现了接口1的方法1"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"D 实现了接口3的方法4"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method5</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"D 实现了接口3的方法5"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend1</span><span class="hljs-params">(interface1 i)</span> </span>&#123;</span><br><span class="line">i.method1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend2</span><span class="hljs-params">(interface2 i)</span> </span>&#123;</span><br><span class="line">i.method2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend3</span><span class="hljs-params">(interface2 i)</span> </span>&#123;</span><br><span class="line">i.method3();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend1</span><span class="hljs-params">(interface1 i)</span> </span>&#123;</span><br><span class="line">i.method1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend4</span><span class="hljs-params">(interface3 i)</span> </span>&#123;</span><br><span class="line">i.method4();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">depend5</span><span class="hljs-params">(interface3 i)</span> </span>&#123;</span><br><span class="line">i.method5();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="yi-lai-dao-zhuan-yuan-ze">依赖倒转原则</span><a href="#yi-lai-dao-zhuan-yuan-ze" class="header-anchor">$</a></h2><h3><span id="ji-ben-jie-shao">基本介绍</span><a href="#ji-ben-jie-shao" class="header-anchor">$</a></h3><blockquote><p>依赖倒转原则(Dependence Inversion Principle)是指：<br>1) 高层模块不应该依赖低层模块，二者都应该依赖其抽象<br>2) 抽象不应该依赖细节，细节应该依赖抽象<br>3) 依赖倒转(倒置)的中心思想是面向接口编程<br>4) 依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中，抽象指的是接口或抽象类，细节就是具体的实现类<br>5) 使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成</p></blockquote></li></ol><h3><span id="ying-yong-shi-li">应用实例</span><a href="#ying-yong-shi-li" class="header-anchor">$</a></h3><ol><li>接口传递</li><li>构造方法传递</li><li>setter方法传递</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DInversion</span> </span>&#123;</span><br><span class="line">Food food;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">//1. 接口传递</span></span><br><span class="line">Fruit fruit = <span class="hljs-keyword">new</span> Fruit();</span><br><span class="line">Operation operation = <span class="hljs-keyword">new</span> Operation();</span><br><span class="line">operation.operate(fruit);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//2. 构造方法传递</span></span><br><span class="line">Operation operation2 = <span class="hljs-keyword">new</span> Operation(<span class="hljs-keyword">new</span> Vegetable());</span><br><span class="line">operation2.operate();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//3. setter方法传递</span></span><br><span class="line">Operation operation3 = <span class="hljs-keyword">new</span> Operation();</span><br><span class="line">operation3.setFood(fruit);</span><br><span class="line">operation3.operate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Operation</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> Food food;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Operation</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Operation</span><span class="hljs-params">(Food food)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.food = food;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFood</span><span class="hljs-params">(Food food)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.food = food;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operate</span><span class="hljs-params">(Food food)</span> </span>&#123;</span><br><span class="line">food.eat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operate</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">food.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Food</span></span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vegetable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Food</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"吃蔬菜..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fruit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Food</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"吃水果.."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="yi-lai-zhuan-huan-yuan-ze-de-zhu-yi-shi-xiang-he-xi-jie">依赖转换原则的注意事项和细节</span><a href="#yi-lai-zhuan-huan-yuan-ze-de-zhu-yi-shi-xiang-he-xi-jie" class="header-anchor">$</a></h3><blockquote><p>1) 低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好.<br>2) 变量的声明类型尽量是抽象类或接口, 这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化<br>3) 继承时遵循里氏替换原则</p></blockquote><h2><span id="li-shi-ti-huan-yuan-ze">里氏替换原则</span><a href="#li-shi-ti-huan-yuan-ze" class="header-anchor">$</a></h2><h3><span id="oo-zhong-de-ji-cheng-xing-de-si-kao-he-shuo-ming">OO中的继承性的思考和说明</span><a href="#oo-zhong-de-ji-cheng-xing-de-si-kao-he-shuo-ming" class="header-anchor">$</a></h3><blockquote><p>1) 继承包含这样一层含义：父类中凡是已经实现好的方法， 实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。<br>2) 继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障<br>3) 问题提出：在编程中，如何正确的使用继承? =&gt; 里氏替换原则</p></blockquote><h3><span id="ji-ben-jie-shao">基本介绍</span><a href="#ji-ben-jie-shao" class="header-anchor">$</a></h3><blockquote><p>1) 里氏替换原则 <strong>(Liskov Substitution Principle)</strong> 在1988年，由麻省理工学院的以为姓里的女士提出的。<br>2) 如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型T2类型T1的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。<br>3) 在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法<br>4) 里氏替换原则告诉我们，继承实际上让两个类耦合性增强了， <strong>在适当的情况下</strong>，可以通过 <strong>聚合，组合，依赖</strong> 来解决问题。</p></blockquote><h3><span id="yi-ge-cheng-xu-yin-chu-wen-ti-si-kao">一个程序引出问题思考</span><a href="#yi-ge-cheng-xu-yin-chu-wen-ti-si-kao" class="header-anchor">$</a></h3><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200323124246.png" alt><br><strong>解决方法</strong>  </p><blockquote><p>1) 我们发现原来运行正常的相减功能发生了错误。原因就是类B无意中重写了父类的方法，造成原有功能出现错误。在实际编程中，我们常常会通过重写父类的方法完成新的功能，这样写起来虽然简单，但整个继承体系的复用性会比较差。特别是运行多态比较频繁的时候<br>2) 通用的做法是：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等关系代替<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200324102205.png" alt></p></blockquote><h2><span id="kai-bi-yuan-ze">开闭原则</span><a href="#kai-bi-yuan-ze" class="header-anchor">$</a></h2><h3><span id="ji-ben-jie-shao">基本介绍</span><a href="#ji-ben-jie-shao" class="header-anchor">$</a></h3><blockquote><p>1) 开闭原则（Open Closed Principle） 是编程中最基础、最重要的设计原则<br>2) 一个软件实体如类，模块和函数应该对扩展开放(对提供方)， 对修改关闭(对使用方)。 用抽象构建框架，用实现扩展细节。  ( <strong>这里的使用放是指调用</strong> )<br>3) 当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。<br>4) 编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则</p></blockquote><h3><span id="kan-xia-mian-yi-duan-dai-ma">看下面一段代码</span><a href="#kan-xia-mian-yi-duan-dai-ma" class="header-anchor">$</a></h3><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200325102253.png" alt></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">GraphicEditor graphicEditor = <span class="hljs-keyword">new</span> GraphicEditor();</span><br><span class="line">graphicEditor.drawCircle(<span class="hljs-keyword">new</span> Circle());</span><br><span class="line">graphicEditor.drawRectangle(<span class="hljs-keyword">new</span> Rectangle());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GraphicEditor</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawShape</span><span class="hljs-params">(Shape s)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (s.m_type == <span class="hljs-number">1</span>)</span><br><span class="line">drawRectangle(s);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.m_type == <span class="hljs-number">2</span>)</span><br><span class="line">drawCircle(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawRectangle</span><span class="hljs-params">(Shape r)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"矩形"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">(Shape r)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"圆形"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> m_type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;</span><br><span class="line">Rectangle() &#123;</span><br><span class="line"><span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;</span><br><span class="line">Circle() &#123;</span><br><span class="line"><span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优缺点</strong>    </p><blockquote><p>1) 优点是比较好理解，简单易操作。<br>2) 缺点是违反了设计模式的ocp原则，即对扩展开放(提供方)，对修改关闭(使用方)。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码.<br>3) 比如我们这时要新增加一个图形种类 三角形，我们需要做如下修改， 修改的地方较多</p></blockquote><h3><span id="dai-ma-gai-jin-gai-jin">代码改进改进</span><a href="#dai-ma-gai-jin-gai-jin" class="header-anchor">$</a></h3><p><font color="red">改进的思路分析</font><br><strong>思路：</strong>  把创建Shape类做成抽象类，并提供一个抽象的draw方法，让子类去实现即可，这样我们有新的图形种类时，只需要让新的图形类继承Shape，并实现draw方法即可，<br>使用方的代码就不需要修 -&gt; <font color="red">满足了开闭原则</font></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OCP</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">GraphicEditor graphicEditor = <span class="hljs-keyword">new</span> GraphicEditor();</span><br><span class="line">graphicEditor.drawShape(<span class="hljs-keyword">new</span> Rectangle());</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//增加图形而不更改调用的方法，（使用方）</span></span><br><span class="line"><span class="hljs-comment">//正在运行的方法位置（提供方）</span></span><br><span class="line">graphicEditor.drawShape(<span class="hljs-keyword">new</span> Triangle());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 使用方</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GraphicEditor</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawShape</span><span class="hljs-params">(Shape s)</span> </span>&#123;</span><br><span class="line">s.draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> m_type;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;</span><br><span class="line">Rectangle() &#123;</span><br><span class="line"><span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"画矩形"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;</span><br><span class="line">Circle() &#123;</span><br><span class="line"><span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"画圆"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Triangle</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>.m_type = <span class="hljs-number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"画三角形"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="di-mi-te-fa-ze">迪米特法则</span><a href="#di-mi-te-fa-ze" class="header-anchor">$</a></h2><h3><span id="ji-ben-jie-shao">基本介绍</span><a href="#ji-ben-jie-shao" class="header-anchor">$</a></h3><blockquote><p>1) 一个对象应该对其他对象保持最少的了解<br>2) 类与类关系越密切，耦合度越大<br>3) 迪米特法则(Demeter Principle)又叫<strong>最少知道原则</strong>，即<strong>一个类对自己依赖的类知道的越少越好</strong>。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的public 方法，不对外泄露任何信息<br>4) 迪米特法则还有个更简单的定义：*<em>只与直接的朋友通信  *</em><br>5) 直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现<font color="red">成员变量，方法参数，方法返回值</font>中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部</p></blockquote><h3><span id="ying-yong-shi-li">应用实例</span><a href="#ying-yong-shi-li" class="header-anchor">$</a></h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demeter</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">new</span> PoisonousAirMaking().make(<span class="hljs-keyword">new</span> GeneralAirMaking());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GeneralAirMaking</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> ArrayList&lt;GeneralAir&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> ArrayList&lt;GeneralAir&gt; <span class="hljs-title">retrieve</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">list.add(<span class="hljs-keyword">new</span> GeneralAir(<span class="hljs-string">"氧气"</span>));</span><br><span class="line">list.add(<span class="hljs-keyword">new</span> GeneralAir(<span class="hljs-string">"二氧化碳"</span>));</span><br><span class="line">list.add(<span class="hljs-keyword">new</span> GeneralAir(<span class="hljs-string">"氮气"</span>));</span><br><span class="line"><span class="hljs-keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PoisonousAirMaking</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> ArrayList&lt;PoisonousAir&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> ArrayList&lt;PoisonousAir&gt; <span class="hljs-title">retrieve</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">list.add(<span class="hljs-keyword">new</span> PoisonousAir(<span class="hljs-string">"一氧化碳"</span>));</span><br><span class="line">list.add(<span class="hljs-keyword">new</span> PoisonousAir(<span class="hljs-string">"氨气"</span>));</span><br><span class="line">list.add(<span class="hljs-keyword">new</span> PoisonousAir(<span class="hljs-string">"二氧化硫"</span>));</span><br><span class="line"><span class="hljs-keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">make</span><span class="hljs-params">(GeneralAirMaking sub)</span> </span>&#123;</span><br><span class="line">retrieve();</span><br><span class="line"><span class="hljs-keyword">for</span>(PoisonousAir paAir:list) &#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"有毒气体--"</span>+paAir.getType());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="hljs-string">"---"</span>);</span><br><span class="line">ArrayList&lt;GeneralAir&gt; list2 = sub.retrieve();</span><br><span class="line"><span class="hljs-keyword">for</span>(GeneralAir gAir: list2) &#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"普通气体--"</span> + gAir.getType());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GeneralAir</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GeneralAir</span><span class="hljs-params">(String type)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>();</span><br><span class="line"><span class="hljs-keyword">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(String type)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PoisonousAir</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PoisonousAir</span><span class="hljs-params">(String type)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>();</span><br><span class="line"><span class="hljs-keyword">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(String type)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="ying-yong-shi-li-gai-jin">应用实例改进</span><a href="#ying-yong-shi-li-gai-jin" class="header-anchor">$</a></h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demeter</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">new</span> PoisonousAirMaking().make(<span class="hljs-keyword">new</span> GeneralAirMaking());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GeneralAirMaking</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> ArrayList&lt;GeneralAir&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> ArrayList&lt;GeneralAir&gt; <span class="hljs-title">retrieve</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">list.add(<span class="hljs-keyword">new</span> GeneralAir(<span class="hljs-string">"氧气"</span>));</span><br><span class="line">list.add(<span class="hljs-keyword">new</span> GeneralAir(<span class="hljs-string">"二氧化碳"</span>));</span><br><span class="line">list.add(<span class="hljs-keyword">new</span> GeneralAir(<span class="hljs-string">"氮气"</span>));</span><br><span class="line"><span class="hljs-keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">make</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">retrieve();</span><br><span class="line"><span class="hljs-keyword">for</span>(GeneralAir gAir: list) &#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"普通气体--"</span> + gAir.getType());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PoisonousAirMaking</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> ArrayList&lt;PoisonousAir&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> ArrayList&lt;PoisonousAir&gt; <span class="hljs-title">retrieve</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">list.add(<span class="hljs-keyword">new</span> PoisonousAir(<span class="hljs-string">"一氧化碳"</span>));</span><br><span class="line">list.add(<span class="hljs-keyword">new</span> PoisonousAir(<span class="hljs-string">"氨气"</span>));</span><br><span class="line">list.add(<span class="hljs-keyword">new</span> PoisonousAir(<span class="hljs-string">"二氧化硫"</span>));</span><br><span class="line"><span class="hljs-keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">make</span><span class="hljs-params">(GeneralAirMaking sub)</span> </span>&#123;</span><br><span class="line">retrieve();</span><br><span class="line"><span class="hljs-keyword">for</span>(PoisonousAir paAir:list) &#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"有毒气体--"</span>+paAir.getType());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="hljs-string">"---"</span>);</span><br><span class="line">sub.make();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GeneralAir</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GeneralAir</span><span class="hljs-params">(String type)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>();</span><br><span class="line"><span class="hljs-keyword">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(String type)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PoisonousAir</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PoisonousAir</span><span class="hljs-params">(String type)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>();</span><br><span class="line"><span class="hljs-keyword">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(String type)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="di-mi-te-fa-ze-zhu-yi-shi-xiang-he-xi-jie">迪米特法则注意事项和细节</span><a href="#di-mi-te-fa-ze-zhu-yi-shi-xiang-he-xi-jie" class="header-anchor">$</a></h3><blockquote><p>1) 迪米特法则的核心是*<em>降低类之间的耦合  *</em><br>2) 但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间(对象间)耦合关系， 并不是要求完全没有依赖关系</p></blockquote><h2><span id="he-cheng-fu-yong-yuan-ze-composite-reuse-principle">合成复用原则（Composite Reuse Principle）</span><a href="#he-cheng-fu-yong-yuan-ze-composite-reuse-principle" class="header-anchor">$</a></h2><h3><span id="ji-ben-jie-shao">基本介绍</span><a href="#ji-ben-jie-shao" class="header-anchor">$</a></h3><blockquote><p>原则是尽量使用合成/聚合的方式，而不是使用继承<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200328114628.png" alt></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;tocStart&quot;&gt;&lt;/div&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#dan-yi-zhi-ze-yuan-ze&quot;&gt;单一职责原则&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ji-ben-jie-shao&quot;&gt;基本介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ying-yong-shi-li&quot;&gt;应用实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dan-yi-zhi-ze-yuan-ze-zhu-yi-shi-xiang-he-xi-jie&quot;&gt;单一职责原则注意事项和细节&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jie-kou-ge-chi-yuan-ze&quot;&gt;接口隔离原则&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ying-yong-shi-li-1&quot;&gt;应用实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ying-chuan-tong-fang-fa-de-wen-ti-he-shi-yong-jie-kou-ge-chi-yuan-ze-gai-jin&quot;&gt;应传统方法的问题和使用接口隔离原则改进&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#yi-lai-dao-zhuan-yuan-ze&quot;&gt;依赖倒转原则&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ji-ben-jie-shao-1&quot;&gt;基本介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ying-yong-shi-li-2&quot;&gt;应用实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#yi-lai-zhuan-huan-yuan-ze-de-zhu-yi-shi-xiang-he-xi-jie&quot;&gt;依赖转换原则的注意事项和细节&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#li-shi-ti-huan-yuan-ze&quot;&gt;里氏替换原则&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#oo-zhong-de-ji-cheng-xing-de-si-kao-he-shuo-ming&quot;&gt;OO中的继承性的思考和说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ji-ben-jie-shao-2&quot;&gt;基本介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#yi-ge-cheng-xu-yin-chu-wen-ti-si-kao&quot;&gt;一个程序引出问题思考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#kai-bi-yuan-ze&quot;&gt;开闭原则&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ji-ben-jie-shao-3&quot;&gt;基本介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#kan-xia-mian-yi-duan-dai-ma&quot;&gt;看下面一段代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dai-ma-gai-jin-gai-jin&quot;&gt;代码改进改进&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#di-mi-te-fa-ze&quot;&gt;迪米特法则&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ji-ben-jie-shao-4&quot;&gt;基本介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ying-yong-shi-li-3&quot;&gt;应用实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ying-yong-shi-li-gai-jin&quot;&gt;应用实例改进&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#di-mi-te-fa-ze-zhu-yi-shi-xiang-he-xi-jie&quot;&gt;迪米特法则注意事项和细节&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#he-cheng-fu-yong-yuan-ze-composite-reuse-principle&quot;&gt;合成复用原则（Composite Reuse Principle）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ji-ben-jie-shao-5&quot;&gt;基本介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;div class=&quot;tocEnd&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com//lyhcc/Images/raw/master/img/20200330173922.png&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;单一职责原则&quot;&gt;&lt;a href=&quot;#单一职责原则&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则&quot;&gt;&lt;/a&gt;单一职责原则&lt;/h2&gt;&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;对类来说的，即一个类应该只负责一项职责。如类A负责两个不同职责：职责1，职责2。&lt;br&gt;当职责1需求变更而改变A时，可能造成职责2执行错误， 所以需要将类A的粒度分解为A1， A2&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Java设计模式之设计模式七大原则" scheme="https://lyhcc.github.io/tags/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式面试题</title>
    <link href="https://lyhcc.github.io/post/9174d842.html"/>
    <id>https://lyhcc.github.io/post/9174d842.html</id>
    <published>2020-03-18T02:25:27.268Z</published>
    <updated>2020-03-20T02:01:19.932Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><!-- tocstop --></div><ol><li>有请使用UML类图画出原型模式核心角色</li><li>原型设计模式的深拷贝和浅拷贝是什么，并写出深拷贝的两种方式的源码(重写<br>clone方法实现深拷贝、 使用序列化来实现深拷贝)</li><li>在Spring框架中哪里使用到原型模式，并对源码进行分析<blockquote><p>beans.xml</p></blockquote><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id01"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.atguigu.spring.bean.Monster"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"prototype"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="4"><li><p>Spring中原型bean的创建，就是原型模式的应用</p></li><li><p>代码分析+Debug源码<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200318110520.png" alt></p></li><li><p><strong>设计模式的七大原则</strong> : 要求： 1) 七大设计原则核心思想 2) 能够以类图的说明设计原则 3) 在项目实际开发中，你在哪里使用到了ocp原则</p><blockquote><p><strong>设计模式常用的七大原则有:</strong> </p></blockquote><ol><li>单一职责原则</li><li>接口隔离原则</li><li>依赖倒转原则</li><li>里氏替换原则</li><li>开闭原则ocp</li><li>迪米特法则</li><li>合成复用原则<blockquote><p> <img src="https://gitee.com//lyhcc/Images/raw/master/img/20200318110744.png" alt></p></blockquote></li></ol></li><li><p>给定案例让你解释对应的设计模式</p><blockquote><p> <strong>金融借贷平台项目：</strong>  借贷平台的订单，有审核-发布-抢单 等等 步骤，随着操作的不同，会改变订单的状态, 项目中的这个模块实现就会使用到状态模式，请你使用状态模式进行设计，并完成实际代码<br><strong>问题分析 ：</strong><br>这类代码难以应对变化，在添加一种状态时，我们需要手动添加if/else，在添加一种功能时，要对所有的状态进行判断。因此代码会变得越来越臃肿，并且一旦没有处理某个状态，便会发生极其严重的BUG，难以维护<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200318111057.png" alt><br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200318111121.png" alt></p></blockquote></li><li><p>解释器设计模式</p><blockquote><p>1) 介绍解释器设计模式是什么?<br>2) 画出解释器设计模式的UML类图,分析设计模式中的各个角色是什么?<br>3) 请说明Spring的框架中，哪里使用到了解释器设计模式，并做源码级别的分析<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200318111248.png" alt></p></blockquote></li><li><p>解释器模式在Spring框架应用的源码剖析<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200318111345.png" alt></p></li><li><p>单例设计模式一共有几种实现方式？请分别用代码实现，并说明各个实现方式的优点和缺点?</p><blockquote><p>单例设计模式一共有8种写法，<br>1) 饿汉式 两种<br>2) 懒汉式 三种<br>3) 双重检查<br>4) 静态内部类<br>5) 枚举</p></blockquote></li></ol><hr><p><strong>设计模式的重要性</strong>  </p><ol><li>软件工程中， 设计模式（design pattern）是对软件设计中普遍存在（反复出现）<br>的各种问题，所提出的解决方案。这个术语是由埃里希·伽玛（Erich Gamma）等人<br>在1990年代从建筑设计领域引入到计算机科学的</li><li>大厦 VS 简易房<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200318111608.png" alt></li><li>拿实际工作经历来说, 当一个项目开发完后，如果客户提出增新功能，怎么办?。<mark>可扩展性，使用设计模式，使软件具有更好的扩展性</mark></li><li>如果项目开发完后，原来程序员离职，你接手维护该项目怎么办? (维护性[可读性、规范性])</li><li>目前程序员门槛越来越高，一线IT公司(大厂)，都会问你在实际项目中使用过什么设计模式，怎样使用的，解决了什么问题。</li><li>设计模式在软件中哪里？<mark>面向对象(oo)=&gt;功能模块[设计模式+算法(数据结构)]=&gt;框架[使用到多种设计模式]=&gt;架构 [服务器集群]</mark></li><li>如果想成为合格软件 <strong>工程师</strong> ， 那就花时间来研究下设计模式是非常必要的</li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;tocStart&quot;&gt;&lt;/div&gt;

&lt;!-- toc --&gt;



&lt;!-- tocstop --&gt;

&lt;div class=&quot;tocEnd&quot;&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;有请使用UML类图画出原型模式核心角色&lt;/li&gt;
&lt;li&gt;原型设计模式的深拷贝和浅拷贝是什么，并写出深拷贝的两种方式的源码(重写&lt;br&gt;clone方法实现深拷贝、 使用序列化来实现深拷贝)&lt;/li&gt;
&lt;li&gt;在Spring框架中哪里使用到原型模式，并对源码进行分析&lt;blockquote&gt;
&lt;p&gt;beans.xml&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight xml hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;id01&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.atguigu.spring.bean.Monster&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;scope&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;prototype&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Java设计模式" scheme="https://lyhcc.github.io/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java设计模式面试题" scheme="https://lyhcc.github.io/tags/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>56. Merge Intervals</title>
    <link href="https://lyhcc.github.io/post/15fe401e.html"/>
    <id>https://lyhcc.github.io/post/15fe401e.html</id>
    <published>2020-03-09T15:20:47.250Z</published>
    <updated>2020-03-09T15:25:33.752Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="56-merge-intervals">56. Merge Intervals</span><a href="#56-merge-intervals" class="header-anchor">$</a></h1><p><a href="https://leetcode.com/problems/merge-intervals/" target="_blank" rel="noopener">题目</a></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[][] merge(<span class="hljs-keyword">int</span>[][] a) &#123;</span><br><span class="line">  <span class="hljs-comment">//1. 先去除a为空的情况</span></span><br><span class="line">  <span class="hljs-keyword">if</span>(a.length==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;&#125;;</span><br><span class="line">  Integer[][] intervals = <span class="hljs-keyword">new</span> Integer[a.length][a[<span class="hljs-number">0</span>].length];</span><br><span class="line">  <span class="hljs-comment">//2. 为了方便排序，将其转换为Integer数组</span></span><br><span class="line">  cpy(a, intervals);</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">//3. 排序</span></span><br><span class="line">  Arrays.sort(intervals, <span class="hljs-keyword">new</span> Comparator&lt;Integer[]&gt;() &#123;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-meta">@Override</span></span><br><span class="line">              <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Integer[] x, Integer[] y)</span> </span>&#123;</span><br><span class="line">                  <span class="hljs-keyword">if</span>(x[<span class="hljs-number">0</span>] &lt; y[<span class="hljs-number">0</span>])&#123;</span><br><span class="line">                      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;</span><br><span class="line">                  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x[<span class="hljs-number">0</span>] &gt; y[<span class="hljs-number">0</span>])&#123;</span><br><span class="line">                      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">                  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-comment">//4. 遍历查找是否相交</span></span><br><span class="line">  ArrayList&lt;Integer[]&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;intervals.length;i++) &#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> j = i;</span><br><span class="line">  Integer[] tIntegers = <span class="hljs-keyword">new</span> Integer[<span class="hljs-number">2</span>];</span><br><span class="line">  tIntegers[<span class="hljs-number">0</span>] = intervals[i][<span class="hljs-number">0</span>];</span><br><span class="line">  tIntegers[<span class="hljs-number">1</span>] = intervals[i][<span class="hljs-number">1</span>];</span><br><span class="line">  <span class="hljs-comment">//有相交的情况</span></span><br><span class="line">  <span class="hljs-keyword">while</span>(i+<span class="hljs-number">1</span>&lt;=intervals.length-<span class="hljs-number">1</span>&amp;&amp;intervals[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]&lt;=tIntegers[<span class="hljs-number">1</span>]) &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(intervals[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]&gt;tIntegers[<span class="hljs-number">1</span>]) &#123;</span><br><span class="line">  tIntegers[<span class="hljs-number">1</span>] = intervals[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  i++;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  list.add(tIntegers);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">//5. 转换为int[][]返回</span></span><br><span class="line">  <span class="hljs-keyword">int</span>[][] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[list.size()][<span class="hljs-number">2</span>];</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;list.size();i++) &#123;</span><br><span class="line">  Integer[] integers = list.get(i);</span><br><span class="line">  res[i][<span class="hljs-number">0</span>] = integers[<span class="hljs-number">0</span>];</span><br><span class="line">  res[i][<span class="hljs-number">1</span>] = integers[<span class="hljs-number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"><span class="hljs-keyword">return</span> res;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;56-merge-intervals&quot;&gt;56. Merge Intervals&lt;/span&gt;&lt;a href=&quot;#56-merge-intervals&quot; class=&quot;header-anchor&quot;&gt;$&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https:
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://lyhcc.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode/55. Jump Game</title>
    <link href="https://lyhcc.github.io/post/630c2358.html"/>
    <id>https://lyhcc.github.io/post/630c2358.html</id>
    <published>2020-03-03T14:33:20.937Z</published>
    <updated>2020-03-03T14:41:22.622Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="55-jump-game">55. Jump Game</span><a href="#55-jump-game" class="header-anchor">$</a></h1><p><a href="https://leetcode.com/problems/jump-game/" target="_blank" rel="noopener">题目</a></p><h2><span id="jie-ti-si-lu">解题思路</span><a href="#jie-ti-si-lu" class="header-anchor">$</a></h2><ol><li>判断是否到达或者不能到达</li><li>继续遍历<ol><li>如果当前位置到当前位置可到达最远位置之间，所有点都满足这种情况，就跳到可以跳到的最远位置<br> <img src="https://gitee.com//lyhcc/Images/raw/master/img/20200303223904.png" alt></li><li>不满足，则找最后一个满足的点，这点就是下一步的点</li></ol></li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">canJump</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> jump(nums, <span class="hljs-number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">jump</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> current)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span>(current+nums[current]&gt;=nums.length-<span class="hljs-number">1</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(nums[current]==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line"><span class="hljs-comment">//找最大</span></span><br><span class="line"><span class="hljs-keyword">int</span> maxi = current+<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(maxi+nums[maxi]&lt;current+nums[current])maxi++;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span>(maxi&lt;current+nums[current]) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> jump(nums, maxi);</span><br><span class="line">&#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> jump(nums, current+nums[current]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;55-jump-game&quot;&gt;55. Jump Game&lt;/span&gt;&lt;a href=&quot;#55-jump-game&quot; class=&quot;header-anchor&quot;&gt;$&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/pro
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>54. Spiral Matrix</title>
    <link href="https://lyhcc.github.io/post/f8e18060.html"/>
    <id>https://lyhcc.github.io/post/f8e18060.html</id>
    <published>2020-03-03T12:33:26.824Z</published>
    <updated>2020-03-03T13:39:56.522Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="54-spiral-matrix">54. Spiral Matrix</span><a href="#54-spiral-matrix" class="header-anchor">$</a></h1><p><a href="https://leetcode.com/problems/spiral-matrix/" target="_blank" rel="noopener">题目</a></p><h2><span id="jie-ti-si-lu">解题思路</span><a href="#jie-ti-si-lu" class="header-anchor">$</a></h2><blockquote><p>直接模拟</p></blockquote><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">spiralOrder</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> n=matrix.length;</span><br><span class="line">        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> list;</span><br><span class="line">    <span class="hljs-keyword">int</span> m = matrix[<span class="hljs-number">0</span>].length;</span><br><span class="line">    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>,loop=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span>(cnt&lt;m*n) &#123;</span><br><span class="line">    <span class="hljs-keyword">while</span>(cnt&lt;n*m&amp;&amp;j&lt;m-loop) &#123;</span><br><span class="line">    list.add(matrix[i][j]);</span><br><span class="line">    cnt++;</span><br><span class="line">    j++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    j--;</span><br><span class="line">    i++;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">while</span>(cnt&lt;m*n&amp;&amp;i&lt;n-loop) &#123;</span><br><span class="line">    list.add(matrix[i][j]);</span><br><span class="line">    </span><br><span class="line">    i++;</span><br><span class="line">    cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    i--;</span><br><span class="line">    j--;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">while</span>(cnt&lt;m*n&amp;&amp;j&gt;=loop) &#123;</span><br><span class="line">    list.add(matrix[i][j]);</span><br><span class="line">    cnt++;</span><br><span class="line">    j--;</span><br><span class="line">    &#125;</span><br><span class="line">    j++;</span><br><span class="line">    i--;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">while</span>(cnt&lt;m*n&amp;&amp;i&gt;loop) &#123;</span><br><span class="line">    list.add(matrix[i][j]);</span><br><span class="line">    i--;</span><br><span class="line">    cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">    j++;</span><br><span class="line">    loop++;</span><br><span class="line">    <span class="hljs-comment">//System.out.println(list);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="hljs-keyword">return</span> list;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>整理后</p></blockquote><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">spiralOrder</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">  ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">int</span> m=matrix.length;</span><br><span class="line">      <span class="hljs-keyword">if</span>(m==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> list;</span><br><span class="line">  <span class="hljs-keyword">int</span> n = matrix[<span class="hljs-number">0</span>].length;</span><br><span class="line">  <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>,loop=<span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">while</span>(cnt&lt;m*n) &#123;</span><br><span class="line">  i=loop;</span><br><span class="line">  j=loop;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j; k&lt;n-loop;k++,cnt++) &#123;</span><br><span class="line">  list.add(matrix[i][k]);</span><br><span class="line">  &#125;</span><br><span class="line">  j += n-loop-<span class="hljs-number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=i+<span class="hljs-number">1</span>;k&lt;m-loop;k++,cnt++) &#123;</span><br><span class="line">  list.add(matrix[k][j]);</span><br><span class="line">  &#125;</span><br><span class="line">  i += m-loop-<span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j-<span class="hljs-number">1</span>; k&gt;=loop;k--,cnt++) &#123;</span><br><span class="line">  list.add(matrix[i][k]);</span><br><span class="line">  &#125;</span><br><span class="line">  j = loop;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=i-<span class="hljs-number">1</span>;k&gt;loop;k--,cnt++) &#123;</span><br><span class="line">  list.add(matrix[k][j]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  loop++;</span><br><span class="line">  <span class="hljs-comment">//System.out.println(list);</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="hljs-keyword">return</span> list;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接使用一个循环</p></blockquote><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">spiralOrder</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">  ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">int</span> m=matrix.length;</span><br><span class="line">      <span class="hljs-keyword">if</span>(m==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> list;</span><br><span class="line">  <span class="hljs-keyword">int</span> n = matrix[<span class="hljs-number">0</span>].length;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">int</span>[][] dirs = &#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>&#125;,&#123;-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;&#125;;</span><br><span class="line">  <span class="hljs-keyword">int</span> idx = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;m*n;k++) &#123;</span><br><span class="line">  </span><br><span class="line">  list.add(matrix[i][j]);</span><br><span class="line">  matrix[i][j] = <span class="hljs-number">1000</span>;</span><br><span class="line">  <span class="hljs-keyword">int</span> x = i + dirs[idx][<span class="hljs-number">0</span>];</span><br><span class="line">  <span class="hljs-keyword">int</span> y = j + dirs[idx][<span class="hljs-number">1</span>];</span><br><span class="line">  <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span> || y&lt;<span class="hljs-number">0</span> || x&gt;=m || y&gt;=n || (matrix[x][y]^<span class="hljs-number">1000</span>)==<span class="hljs-number">0</span>) &#123;</span><br><span class="line">  idx = (idx + <span class="hljs-number">1</span>)%<span class="hljs-number">4</span>;</span><br><span class="line">  x = i + dirs[idx][<span class="hljs-number">0</span>];</span><br><span class="line">  y = j + dirs[idx][<span class="hljs-number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  i=x;</span><br><span class="line">  j=y;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="hljs-keyword">return</span> list;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;54-spiral-matrix&quot;&gt;54. Spiral Matrix&lt;/span&gt;&lt;a href=&quot;#54-spiral-matrix&quot; class=&quot;header-anchor&quot;&gt;$&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leet
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://lyhcc.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>51. N-Queens</title>
    <link href="https://lyhcc.github.io/post/7040787d.html"/>
    <id>https://lyhcc.github.io/post/7040787d.html</id>
    <published>2020-02-29T13:19:45.795Z</published>
    <updated>2020-03-01T02:10:02.766Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="51-n-queens">51. N-Queens</span><a href="#51-n-queens" class="header-anchor">$</a></h1><p><a href="https://leetcode.com/problems/n-queens/" target="_blank" rel="noopener">题目</a></p><h2><span id="jie-ti-si-lu">解题思路</span><a href="#jie-ti-si-lu" class="header-anchor">$</a></h2><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200229212627.png" alt></p><ol><li>根据上图的方式是否位于同一对角线</li><li>开始按行遍历，在此过程性需要定义一个数组标明是否在对角线，列上已有皇后</li><li>这也就是回朔法，先试着走，不合适回退</li></ol><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">boolean</span>[][] visited;</span><br><span class="line"><span class="hljs-keyword">private</span> List&lt;List&lt;String&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="hljs-keyword">int</span> n) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;StringBuffer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;StringBuffer&gt;();</span><br><span class="line">        visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[<span class="hljs-number">3</span>][n*<span class="hljs-number">2</span>];</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;n;i++) &#123;</span><br><span class="line">            StringBuffer sbuf = <span class="hljs-keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                sbuf.append(<span class="hljs-string">'.'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        list.add(sbuf);</span><br><span class="line">        &#125;</span><br><span class="line">        search(list, <span class="hljs-number">0</span>, n);</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">search</span><span class="hljs-params">(List&lt;StringBuffer&gt; list, <span class="hljs-keyword">int</span> cur, <span class="hljs-keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(cur==n) &#123;</span><br><span class="line">ArrayList&lt;String&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="hljs-keyword">for</span>(StringBuffer sb: list) &#123;</span><br><span class="line">list2.add(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line">res.add(list2);</span><br><span class="line"><span class="hljs-keyword">return</span> ;</span><br><span class="line">&#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line"><span class="hljs-comment">//System.out.println(cur-i+n+";;"+visited[0].length);</span></span><br><span class="line"><span class="hljs-keyword">if</span>(!visited[<span class="hljs-number">0</span>][i]&amp;&amp;!visited[<span class="hljs-number">1</span>][cur+i]</span><br><span class="line">&amp;&amp;!visited[<span class="hljs-number">2</span>][cur-i+n]) &#123;</span><br><span class="line">list.get(cur).setCharAt(i, <span class="hljs-string">'Q'</span>);</span><br><span class="line">visited[<span class="hljs-number">0</span>][i] = visited[<span class="hljs-number">1</span>][cur+i] = visited[<span class="hljs-number">2</span>][cur-i+n]=<span class="hljs-keyword">true</span>;</span><br><span class="line">search(list, cur+<span class="hljs-number">1</span>, n);</span><br><span class="line"></span><br><span class="line">list.get(cur).setCharAt(i, <span class="hljs-string">'.'</span>);</span><br><span class="line">visited[<span class="hljs-number">0</span>][i] = visited[<span class="hljs-number">1</span>][cur+i] = visited[<span class="hljs-number">2</span>][cur-i+n] = <span class="hljs-keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2><span id="geng-kuai-su-de-fang-fa">更快速的方法</span><a href="#geng-kuai-su-de-fang-fa" class="header-anchor">$</a></h2><p><a href="https://www.cnblogs.com/1625--H/p/11664546.html" target="_blank" rel="noopener">参考链接</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;51-N-Queens&quot;&gt;&lt;a href=&quot;#51-N-Queens&quot; class=&quot;headerlink&quot; title=&quot;51. N-Queens&quot;&gt;&lt;/a&gt;51. N-Queens&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/n-queens/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com//lyhcc/Images/raw/master/img/20200229212627.png&quot; alt&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据上图的方式是否位于同一对角线&lt;/li&gt;
&lt;li&gt;开始按行遍历，在此过程性需要定义一个数组标明是否在对角线，列上已有皇后&lt;/li&gt;
&lt;li&gt;这也就是回朔法，先试着走，不合适回退&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://lyhcc.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>49. Group Anagrams</title>
    <link href="https://lyhcc.github.io/post/7ed42f60.html"/>
    <id>https://lyhcc.github.io/post/7ed42f60.html</id>
    <published>2020-02-29T08:39:59.339Z</published>
    <updated>2020-02-29T08:43:52.689Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="49-group-anagrams">49. Group Anagrams</span><a href="#49-group-anagrams" class="header-anchor">$</a></h1><p><a href="https://leetcode.com/problems/group-anagrams/" target="_blank" rel="noopener">题目</a></p><h2><span id="jie-ti-si-lu">解题思路</span><a href="#jie-ti-si-lu" class="header-anchor">$</a></h2><ol><li>把相应的字符串转为字符数组，然后排序，并将该数组转为字符串和当前数据种类的索引存入map</li><li>没遍历一个查看map是否已存在索引，不存在创建一个List并存进去</li><li>存在则获得，并将对应的字符串存入获得的List中</li></ol><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</span><br><span class="line">    Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;strs.length;i++) &#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    String current = sortString(strs[i]);</span><br><span class="line">    Integer index;</span><br><span class="line">    <span class="hljs-keyword">if</span>((index = map.get(current))==<span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">    ArrayList&lt;String&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    map.put(current, list.size());</span><br><span class="line">    list2.add(strs[i]);</span><br><span class="line">    list.add(list2);</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-comment">//System.out.println(strs[i]+",index="+index);</span></span><br><span class="line">    List&lt;String&gt; list2 = list.get(index);</span><br><span class="line">    list2.add(strs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sortString</span><span class="hljs-params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span>[] cs = str.toCharArray();</span><br><span class="line">Arrays.sort(cs);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> Arrays.toString(cs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] input = &#123;<span class="hljs-string">"eat"</span>,<span class="hljs-string">"tea"</span>, <span class="hljs-string">"tan"</span>, <span class="hljs-string">"ate"</span>, <span class="hljs-string">"nat"</span>, <span class="hljs-string">"bat"</span>&#125;;</span><br><span class="line">System.out.println(<span class="hljs-keyword">new</span> Solution().groupAnagrams(input));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;49-Group-Anagrams&quot;&gt;&lt;a href=&quot;#49-Group-Anagrams&quot; class=&quot;headerlink&quot; title=&quot;49. Group Anagrams&quot;&gt;&lt;/a&gt;49. Group Anagrams&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/group-anagrams/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;把相应的字符串转为字符数组，然后排序，并将该数组转为字符串和当前数据种类的索引存入map&lt;/li&gt;
&lt;li&gt;没遍历一个查看map是否已存在索引，不存在创建一个List并存进去&lt;/li&gt;
&lt;li&gt;存在则获得，并将对应的字符串存入获得的List中&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://lyhcc.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>48. Rotate Image</title>
    <link href="https://lyhcc.github.io/post/bb40d963.html"/>
    <id>https://lyhcc.github.io/post/bb40d963.html</id>
    <published>2020-02-29T07:47:21.163Z</published>
    <updated>2020-02-29T07:49:41.561Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="leetcode48">leetcode48</span><a href="#leetcode48" class="header-anchor">$</a></h1><p><a href="https://leetcode.com/problems/rotate-image/" target="_blank" rel="noopener">题目</a></p><h2><span id="jie-ti-si-lu">解题思路</span><a href="#jie-ti-si-lu" class="header-anchor">$</a></h2><blockquote><p>新建一个等大小的数组，然后换一种形式为原先的数组赋值<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200229154655.png" alt></p></blockquote><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span>[][] tmp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[matrix.length][matrix.length];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;matrix.length;i++) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;matrix.length;j++) &#123;</span><br><span class="line">tmp[i][j] = matrix[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;matrix.length;i++) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;matrix.length;j++) &#123;</span><br><span class="line">matrix[j][matrix.length-i-<span class="hljs-number">1</span>] = tmp[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;leetcode48&quot;&gt;leetcode48&lt;/span&gt;&lt;a href=&quot;#leetcode48&quot; class=&quot;header-anchor&quot;&gt;$&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/r
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://lyhcc.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>47. Permutations II</title>
    <link href="https://lyhcc.github.io/post/2bffc4f2.html"/>
    <id>https://lyhcc.github.io/post/2bffc4f2.html</id>
    <published>2020-02-29T05:37:09.575Z</published>
    <updated>2020-02-29T05:45:30.727Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="leetcode47">leetcode47</span><a href="#leetcode47" class="header-anchor">$</a></h1><p><a href="https://leetcode.com/problems/permutations-ii/" target="_blank" rel="noopener">题目</a></p><h2><span id="jie-ti-si-lu">解题思路</span><a href="#jie-ti-si-lu" class="header-anchor">$</a></h2><blockquote><p>分析：要求获得可重集全排列<br>该题通过递归解决，实现时需要注意几点</p><blockquote><ol><li>同一层的重复元素不进行递归  </li><li>查看是否已经使用完当前元素，如果全部使用完了，也不进行递归</li></ol></blockquote></blockquote><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> List&lt;List&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="hljs-keyword">int</span>[] nums) &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    </span><br><span class="line">    permute(nums,<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length], <span class="hljs-number">0</span>);</span><br><span class="line">    </span><br><span class="line"><span class="hljs-keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">permute</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span>[] A, <span class="hljs-keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(cur==nums.length) &#123;</span><br><span class="line"><span class="hljs-comment">//System.out.println("nums[cur]="+nums[cur]);</span></span><br><span class="line">list.add(toList(A));</span><br><span class="line">&#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>||nums[i]!=nums[i-<span class="hljs-number">1</span>]) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> c1 = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> c2 = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j&lt;cur;j++) &#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"cur="</span>+cur+<span class="hljs-string">","</span>+A[j]);</span><br><span class="line"><span class="hljs-keyword">if</span>(nums[i]==A[j])c1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;nums.length;j++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(nums[i]==nums[j])c2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(c1&lt;c2) &#123;</span><br><span class="line">A[cur] = nums[i];</span><br><span class="line">permute(nums, A, cur+<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-comment">//tmp.remove(i);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> List <span class="hljs-title">toList</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Object&gt; arrayList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span>(Integer e: nums) &#123;</span><br><span class="line">    arrayList.add(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span>[] nums = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="hljs-keyword">new</span> Solution().permuteUnique(nums).toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode47&quot;&gt;&lt;a href=&quot;#leetcode47&quot; class=&quot;headerlink&quot; title=&quot;leetcode47&quot;&gt;&lt;/a&gt;leetcode47&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/permutations-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;分析：要求获得可重集全排列&lt;br&gt;该题通过递归解决，实现时需要注意几点&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;同一层的重复元素不进行递归  &lt;/li&gt;
&lt;li&gt;查看是否已经使用完当前元素，如果全部使用完了，也不进行递归&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://lyhcc.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode/leetcode46</title>
    <link href="https://lyhcc.github.io/post/5cf8f464.html"/>
    <id>https://lyhcc.github.io/post/5cf8f464.html</id>
    <published>2020-02-29T04:54:39.106Z</published>
    <updated>2020-02-29T05:44:55.578Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="46-permutations">46. Permutations</span><a href="#46-permutations" class="header-anchor">$</a></h1><p><a href="https://leetcode.com/problems/permutations/" target="_blank" rel="noopener">题目</a></p><h2><span id="jie-ti-si-lu">解题思路</span><a href="#jie-ti-si-lu" class="header-anchor">$</a></h2><ol><li>先将一个数组从小到大排序</li><li>从有向左查找第一个递减的数</li><li>再次2找的的数右边查比该数大的最小的数</li><li>步骤2,3找到的数互换位置</li><li>步骤找到的数的后面的数，进行逆转（可以进行排序O(nlogn)，也可以逆转O(n)），逆转的时间复杂度比较小</li></ol><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="hljs-keyword">int</span>[] nums) &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">int</span> rht = nums.length - <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> j = rht;</span><br><span class="line">    </span><br><span class="line">    list.add(toList(nums));</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    j = rht;</span><br><span class="line">    <span class="hljs-keyword">while</span>(j-<span class="hljs-number">1</span> &gt;=<span class="hljs-number">0</span> &amp;&amp; nums[j] &lt; nums[j-<span class="hljs-number">1</span>])j--;</span><br><span class="line">    <span class="hljs-keyword">if</span>(j-<span class="hljs-number">1</span> &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> list;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">int</span> i = j;</span><br><span class="line">    <span class="hljs-keyword">while</span>(i&lt;=rht &amp;&amp; nums[i] &gt; nums[j-<span class="hljs-number">1</span>]) i++;</span><br><span class="line">    <span class="hljs-keyword">if</span>(i&gt;rht)i=rht+<span class="hljs-number">1</span>;</span><br><span class="line">    swap(nums, i-<span class="hljs-number">1</span>, j-<span class="hljs-number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">//Arrays.sort(nums, j, rht+1);</span></span><br><span class="line">    </span><br><span class="line">    reverse(nums, j, rht);</span><br><span class="line">    list.add(toList(nums));</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid = (i+j)/<span class="hljs-number">2</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(mid==nums.length-<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>((i+j)%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a = mid; a&gt;=i;a--) &#123;</span><br><span class="line">    swap(nums, a, <span class="hljs-number">2</span>*mid-a+<span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a = mid-<span class="hljs-number">1</span>; a&gt;=i;a--) &#123;</span><br><span class="line">    swap(nums, a, <span class="hljs-number">2</span>*mid-a);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> List <span class="hljs-title">toList</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Object&gt; arrayList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span>(Integer e: nums) &#123;</span><br><span class="line">    arrayList.add(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> tmp = nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span>[] nums = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="hljs-keyword">new</span> Solution().permute(nums).toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;46-Permutations&quot;&gt;&lt;a href=&quot;#46-Permutations&quot; class=&quot;headerlink&quot; title=&quot;46. Permutations&quot;&gt;&lt;/a&gt;46. Permutations&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/permutations/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;先将一个数组从小到大排序&lt;/li&gt;
&lt;li&gt;从有向左查找第一个递减的数&lt;/li&gt;
&lt;li&gt;再次2找的的数右边查比该数大的最小的数&lt;/li&gt;
&lt;li&gt;步骤2,3找到的数互换位置&lt;/li&gt;
&lt;li&gt;步骤找到的数的后面的数，进行逆转（可以进行排序O(nlogn)，也可以逆转O(n)），逆转的时间复杂度比较小&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="https://lyhcc.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC之RESTful实现CRUD</title>
    <link href="https://lyhcc.github.io/post/14dd2a73.html"/>
    <id>https://lyhcc.github.io/post/14dd2a73.html</id>
    <published>2020-02-25T07:59:19.941Z</published>
    <updated>2020-03-18T02:18:04.835Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#restrul-crud-xu-qiu">RESTRUL_CRUD_需求</a><ul><li><a href="#xian-shi-suo-you-yuan-gong-xin-xi">显示所有员工信息</a></li><li><a href="#tian-jia-yuan-gong-xin-xi">添加员工信息</a></li><li><a href="#shan-chu-cao-zuo">删除操作</a></li><li><a href="#xiu-gai-cao-zuo-lastname-bu-ke-xiu-gai">修改操作：lastName 不可修改！</a></li><li><a href="#xiang-guan-de-lei">相关的类</a></li><li><a href="#xiang-guan-ye-mian">相关页面</a></li></ul></li><li><a href="#restrul-crud-xian-shi-suo-you-yuan-gong-xin-xi">RESTRUL_CRUD_显示所有员工信息</a><ul><li><a href="#da-jian-kai-fa-huan-jing">搭建开发环境</a></li><li><a href="#xian-shi-suo-you-yuan-gong-xin-xi-1">显示所有员工信息</a></li></ul></li><li><a href="#shi-yong-spring-de-biao-dan-biao-qian">使用 Spring的表单标签</a></li><li><a href="#restrul-crud-tian-jia-cao-zuo-biao-dan-biao-qian">RESTRUL_CRUD_添加操作&amp;表单标签</a></li><li><a href="#restrul-crud-shan-chu-cao-zuo-chu-li-jing-tai-zi-yuan">RESTRUL_CRUD_删除操作&amp;处理静态资源</a></li><li><a href="#restrul-crud-xiu-gai-cao-zuo">RESTRUL_CRUD_修改操作</a><ul><li><a href="#gen-ju-id-cha-xun-yuan-gong-dui-xiang-biao-dan-hui-xian">根据id查询员工对象，表单回显</a></li><li><a href="#ti-jiao-biao-dan-xiu-gai-shu-ju">提交表单，修改数据</a></li></ul></li><li><a href="#restrul-crud-shan-chu-cao-zuo-chu-li-jing-tai-zi-yuan-1">RESTRUL_CRUD_删除操作&amp;处理静态资源</a><ul><li><a href="#shan-chu-shi-yan-dai-ma">删除实验代码</a></li><li><a href="#hiddenhttpmethodfilter-guo-lu-qi">HiddenHttpMethodFilter过滤器</a></li><li><a href="#xu-yao-shi-yong-jquery-lai-zhuan-huan-qing-qiu-fang-shi">需要使用jQuery来转换请求方式</a></li><li><a href="#guan-yu-mvc-default-servlet-handler-zuo-yong">关于<a href="mvc:default-servlet-handler/" target="_blank" rel="noopener">mvc:default-servlet-handler/</a>作用</a></li><li><a href="#tong-guo-jquery-zhuan-huan-wei-delete-qing-qiu">通过jQuery转换为DELETE请求</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="restrul-crud-xu-qiu">RESTRUL_CRUD_需求</span><a href="#restrul-crud-xu-qiu" class="header-anchor">$</a></h2><h3><span id="xian-shi-suo-you-yuan-gong-xin-xi">显示所有员工信息</span><a href="#xian-shi-suo-you-yuan-gong-xin-xi" class="header-anchor">$</a></h3><ul><li>URI: emps</li><li>请求方式：GET</li><li>显示效果<br>  <img src="https://gitee.com//lyhcc/Images/raw/master/img/20200225160721.png" alt></li></ul><a id="more"></a><h3><span id="tian-jia-yuan-gong-xin-xi">添加员工信息</span><a href="#tian-jia-yuan-gong-xin-xi" class="header-anchor">$</a></h3><ul><li><p>显示添加页面：</p></li><li><p>URI：emp</p></li><li><p>请求方式：GET</p></li><li><p>显示效果<br>  <img src="https://gitee.com//lyhcc/Images/raw/master/img/20200225160845.png" alt></p></li><li><p>添加员工信息：</p></li><li><p>URI：emp</p></li><li><p>请求方式：POST</p></li><li><p>显示效果：完成添加，重定向到 list 页面。<br>  <img src="https://gitee.com//lyhcc/Images/raw/master/img/20200225161024.png" alt></p></li></ul><h3><span id="shan-chu-cao-zuo">删除操作</span><a href="#shan-chu-cao-zuo" class="header-anchor">$</a></h3><ul><li>URL：emp/{id}</li><li>请求方式：DELETE</li><li>删除后效果：对应记录从数据表中删除</li></ul><h3><span id="xiu-gai-cao-zuo-lastname-bu-ke-xiu-gai">修改操作：lastName 不可修改！</span><a href="#xiu-gai-cao-zuo-lastname-bu-ke-xiu-gai" class="header-anchor">$</a></h3><ol><li>显示修改页面<ul><li>URI：emp/{id}</li><li>请求方式：GET</li><li>显示效果：回显表单。</li></ul></li><li>修改员工信息</li></ol><ul><li>URI：emp </li><li>请求方式：PUT</li><li>显示效果：完成修改，重定向到 list 页面。<br>  <img src="https://gitee.com//lyhcc/Images/raw/master/img/20200225161311.png" alt></li></ul><h3><span id="xiang-guan-de-lei">相关的类</span><a href="#xiang-guan-de-lei" class="header-anchor">$</a></h3><ul><li>省略了Service层</li><li>实体类：Employee、Department</li><li>Controller：EmployeeController</li><li>Dao：EmployeeDao、DepartmentDao<br>  <img src="https://gitee.com//lyhcc/Images/raw/master/img/20200225161532.png" alt></li></ul><h3><span id="xiang-guan-ye-mian">相关页面</span><a href="#xiang-guan-ye-mian" class="header-anchor">$</a></h3><ul><li>list.jsp</li><li>input.jsp</li><li>edit.jsp</li></ul><h2><span id="restrul-crud-xian-shi-suo-you-yuan-gong-xin-xi">RESTRUL_CRUD_显示所有员工信息</span><a href="#restrul-crud-xian-shi-suo-you-yuan-gong-xin-xi" class="header-anchor">$</a></h2><h3><span id="da-jian-kai-fa-huan-jing">搭建开发环境</span><a href="#da-jian-kai-fa-huan-jing" class="header-anchor">$</a></h3><ol><li><p>导包</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">com.springsource.net.sf.cglib-2.2.0.jar</span><br><span class="line">com.springsource.org.aopalliance-1.0.0.jar</span><br><span class="line">com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</span><br><span class="line">spring-aop-4.0.0.RELEASE.jar</span><br><span class="line">spring-aspects-4.0.0.RELEASE.jar</span><br><span class="line">commons-logging-1.1.3.jar</span><br><span class="line">spring-beans-4.0.0.RELEASE.jar</span><br><span class="line">spring-context-4.0.0.RELEASE.jar</span><br><span class="line">spring-core-4.0.0.RELEASE.jar</span><br><span class="line">spring-expression-4.0.0.RELEASE.jar</span><br><span class="line">spring-jdbc-4.0.0.RELEASE.jar</span><br><span class="line">spring-orm-4.0.0.RELEASE.jar</span><br><span class="line">spring-tx-4.0.0.RELEASE.jar</span><br><span class="line">spring-web-4.0.0.RELEASE.jar</span><br><span class="line">spring-webmvc-4.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure></li><li><p>创建配置文件:springmvc.xml  增加context,mvc,beans名称空间。</p></li><li><p>配置核心控制器</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- Map all requests to the DispatcherServlet for handling --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将 POST 请求转换为 PUT 或 DELETE 请求以及字符过滤器</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建相关页面</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/WEB-INF/views/list.jsp</span><br><span class="line">index.jsp</span><br></pre></td></tr></table></figure></li><li><p>增加实体类<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200225165708.png" alt><br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200225165726.png" alt></p></li><li><p>增加Dao</p><ol><li>EmployeeDao <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> xyz.lyhcc.dao;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Map;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> xyz.lyhcc.bean.Department;</span><br><span class="line"><span class="hljs-keyword">import</span> xyz.lyhcc.bean.Employee;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Repository</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-meta">@Autowired</span></span><br><span class="line"><span class="hljs-keyword">private</span> DepartmentDao departmentDao;</span><br><span class="line"><span class="hljs-keyword">static</span>&#123;</span><br><span class="line">employees = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Employee&gt;();</span><br><span class="line">employees.put(<span class="hljs-number">1001</span>, <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1001</span>, <span class="hljs-string">"E-AA"</span>, <span class="hljs-string">"aa@163.com"</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">101</span>, <span class="hljs-string">"D-AA"</span>)));</span><br><span class="line">employees.put(<span class="hljs-number">1002</span>, <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1002</span>, <span class="hljs-string">"E-BB"</span>, <span class="hljs-string">"bb@163.com"</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">102</span>, <span class="hljs-string">"D-BB"</span>)));</span><br><span class="line">employees.put(<span class="hljs-number">1003</span>, <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1003</span>, <span class="hljs-string">"E-CC"</span>, <span class="hljs-string">"cc@163.com"</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">103</span>, <span class="hljs-string">"D-CC"</span>)));</span><br><span class="line">employees.put(<span class="hljs-number">1004</span>, <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1004</span>, <span class="hljs-string">"E-DD"</span>, <span class="hljs-string">"dd@163.com"</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">104</span>, <span class="hljs-string">"D-DD"</span>)));</span><br><span class="line">employees.put(<span class="hljs-number">1005</span>, <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1005</span>, <span class="hljs-string">"E-EE"</span>, <span class="hljs-string">"ee@163.com"</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> Department(<span class="hljs-number">105</span>, <span class="hljs-string">"D-EE"</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Integer initId = <span class="hljs-number">1006</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(Employee employee)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (employee.getId() == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">employee.setId(initId++);</span><br><span class="line">&#125;</span><br><span class="line">employee.setDepartment(departmentDao.getDepartment(employee.getDepartment().getId()));</span><br><span class="line">employees.put(employee.getId(), employee);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;Employee&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> employees.values();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">get</span><span class="hljs-params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> employees.get(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(Integer id)</span> </span>&#123;</span><br><span class="line">employees.remove(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>DeaprtmentDao<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> xyz.lyhcc.bean;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Department</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> Integer id;</span><br><span class="line"><span class="hljs-keyword">private</span> String departmentName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Department</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Department</span><span class="hljs-params">(Integer id, String departmentName)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>();</span><br><span class="line"><span class="hljs-keyword">this</span>.id = id;</span><br><span class="line"><span class="hljs-keyword">this</span>.departmentName = departmentName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDepartmentName</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> departmentName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDepartmentName</span><span class="hljs-params">(String departmentName)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.departmentName = departmentName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3><span id="xian-shi-suo-you-yuan-gong-xin-xi">显示所有员工信息</span><a href="#xian-shi-suo-you-yuan-gong-xin-xi" class="header-anchor">$</a></h3><ol><li><p>页面链接</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"empList"</span>&gt;</span>To Employee List<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>增加处理器</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Controller</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Autowired</span></span><br><span class="line">EmployeeDao employeeDao;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/retrieveEmps"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">retrieveEmps</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">map.put(<span class="hljs-string">"empList"</span>, employeeDao.getAll());</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"list"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SpringMVC中没遍历的标签，需要使用jstl标签进行集合遍历增加jstl标签库jar包</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">"10"</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">"0"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>EmpId<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>LastName<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Gender<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>DepartmentName<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Edit<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">items</span>=<span class="hljs-string">"$&#123;requestScope.empList &#125;"</span> <span class="hljs-attr">var</span>=<span class="hljs-string">"emp"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;emp.id &#125; <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;emp.lastName &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;emp.gender==0?"女": "男" &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;emp.email &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;emp.department.departmentName &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>Edit<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"toaddpage"</span>&gt;</span>Add Employee<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2><span id="shi-yong-spring-de-biao-dan-biao-qian">使用 Spring的表单标签</span><a href="#shi-yong-spring-de-biao-dan-biao-qian" class="header-anchor">$</a></h2><ul><li>通过 SpringMVC 的表单标签可以实现将模型数据中的属性和 HTML 表单元素相绑定，以实现表单数据更便捷编辑和表单值的回显</li><li>form 标签<ul><li>一般情况下，通过 GET 请求获取表单页面，而通过 POST 请求提交表单页面，因此获取表单页面和提交表单页面的 URL 是相同的。</li><li>只要满足该最佳条件的契约，<a href="form:form" target="_blank" rel="noopener">form:form</a> 标签就无需通过 action 属性指定表单提交的 URL</li><li>可以通过 modelAttribute 属性指定绑定的模型属性，若没有指定该属性，则默认从 request 域对象中读取 command 的表单 bean，如果该属性值也不存在，则会发生错误。</li></ul></li><li>SpringMVC 提供了多个表单组件标签，如 <a href="form:input/" target="_blank" rel="noopener">form:input/</a>、<a href="form:select/" target="_blank" rel="noopener">form:select/</a> 等，用以绑定表单字段的属性值，它们的共有属性如下：<ul><li>path：表单字段，对应 html 元素的 name 属性，支持级联属性</li><li>htmlEscape：是否对表单值的 HTML 特殊字符进行转换，默认值为 true</li><li>cssClass：表单组件对应的 CSS 样式类名</li><li>cssErrorClass：表单组件的数据存在错误时，采取的 CSS 样式</li></ul></li><li>form:input、form:password、form:hidden、form:textarea：对应 HTML 表单的 text、password、hidden、textarea 标签</li><li>form:radiobutton：单选框组件标签，当表单 bean 对应的属性值和 value 值相等时，单选框被选中</li><li>form:radiobuttons：单选框组标签，用于构造多个单选框<ul><li>items：可以是一个 List、String[] 或 Map</li><li>itemValue：指定 radio 的 value 值。可以是集合中 bean 的一个属性值</li><li>itemLabel：指定 radio 的 label 值</li><li>delimiter：多个单选框可以通过 delimiter 指定分隔符</li></ul></li><li>form:checkbox：复选框组件。用于构造单个复选框</li><li>form:checkboxs：用于构造多个复选框。使用方式同 form:radiobuttons 标签</li><li>form:select：用于构造下拉框组件。使用方式同 form:radiobuttons 标签</li><li>form:option：下拉框选项组件标签。使用方式同 form:radiobuttons 标签</li><li>form:errors：显示表单组件或数据校验所对应的错误<ul><li>&lt;form:errors path= “*” /&gt; ：显示表单所有的错误</li><li>&lt;form:errors path= “user*” /&gt; ：显示所有以 user 为前缀的属性对应的错误</li><li>&lt;form:errors path= “username” /&gt; ：显示特定表单对象属性的错误</li></ul></li></ul><h2><span id="restrul-crud-tian-jia-cao-zuo-amp-biao-dan-biao-qian">RESTRUL_CRUD_添加操作&amp;表单标签</span><a href="#restrul-crud-tian-jia-cao-zuo-amp-biao-dan-biao-qian" class="header-anchor">$</a></h2><ol><li><p>在list.jsp上增加连接</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"empInput"</span>&gt;</span>Add Employee<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>增加处理器方法</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"toaddpage"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addEmpPage</span><span class="hljs-params">(Model model)</span> </span>&#123;</span><br><span class="line">Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class="line">model.addAttribute(<span class="hljs-string">"depts"</span>, departments);</span><br><span class="line"><span class="hljs-comment">//增加一个属性</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"add"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"increaseEmp"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">increaseEmp</span><span class="hljs-params">(Employee employee, Map&lt;String, Object&gt;map)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">employeeDao.save(employee);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/retrieveEmps"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>显示添加页面</p><ol><li>非SpringMVC的form标签 <figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;% pageContext.setAttribute(<span class="hljs-string">"ctp"</span>, request.getContextPath()); %&gt;</span><br><span class="line">&lt;form action=<span class="hljs-string">"increaseEmp"</span> method=<span class="hljs-string">"POST"</span>&gt;</span><br><span class="line"></span><br><span class="line">lastName: &lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"lastName"</span> /&gt;</span><br><span class="line">email: &lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"email"</span> /&gt;</span><br><span class="line">gender: </span><br><span class="line">男&lt;input type=<span class="hljs-string">"radio"</span> name=<span class="hljs-string">"gender"</span> value=<span class="hljs-string">"1"</span>/&gt;</span><br><span class="line">女&lt;input type=<span class="hljs-string">"radio"</span> name=<span class="hljs-string">"gender"</span> value=<span class="hljs-string">"0"</span>/&gt;</span><br><span class="line">&lt;select name=<span class="hljs-string">"department.id"</span>&gt;</span><br><span class="line">&lt;c:forEach items=<span class="hljs-string">"$&#123;depts &#125;"</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">"dept"</span>&gt;</span><br><span class="line">&lt;option value="$&#123;dept.id &#125;"&gt;$&#123;dept.departmentName &#125;&lt;/option&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"提交"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>SpringMVC的form标签<figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">         &lt;form:form action=<span class="hljs-string">"increaseEmp"</span> method=<span class="hljs-string">"POST"</span> modelAttribute=<span class="hljs-string">"employee"</span>&gt;</span><br><span class="line">&lt;!-- java.lang.IllegalStateException: Neither BindingResult nor plain target object <span class="hljs-keyword">for</span> bean name <span class="hljs-string">'command'</span> available as request attribute --&gt;</span><br><span class="line">LastName: &lt;form:input path="lastName"/&gt;&lt;/br&gt;&lt;/br&gt;</span><br><span class="line">Email:    &lt;form:input path="email"/&gt;&lt;/br&gt;&lt;/br&gt;</span><br><span class="line">Gender:  男&lt;form:radiobutton path=<span class="hljs-string">"gender"</span> value=<span class="hljs-string">"1"</span>/&gt;</span><br><span class="line">  女&lt;form:radiobutton path=<span class="hljs-string">"gender"</span> value=<span class="hljs-string">"0"</span>/&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">Department：&lt;form:select path="department.id" items="$&#123;depts &#125;" itemLabel="departmentName" itemValue="id"&gt;&lt;/form:select&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"提交"</span> /&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><hr><p><strong>注意：</strong>  注意modelAttribute的使用，这里没有在域中使用添加对应的属性会报错<br>ava.lang.IllegalStateException: Neither BindingResult nor plain target object for bean name ‘command’ available as request attribute</p><hr><h2><span id="restrul-crud-shan-chu-cao-zuo-amp-chu-li-jing-tai-zi-yuan">RESTRUL_CRUD_删除操作&amp;处理静态资源</span><a href="#restrul-crud-shan-chu-cao-zuo-amp-chu-li-jing-tai-zi-yuan" class="header-anchor">$</a></h2><ol><li>页面链接</li></ol><h2><span id="restrul-crud-xiu-gai-cao-zuo">RESTRUL_CRUD_修改操作</span><a href="#restrul-crud-xiu-gai-cao-zuo" class="header-anchor">$</a></h2><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200226084536.png" alt></p><h3><span id="gen-ju-id-cha-xun-yuan-gong-dui-xiang-biao-dan-hui-xian">根据id查询员工对象，表单回显</span><a href="#gen-ju-id-cha-xun-yuan-gong-dui-xiang-biao-dan-hui-xian" class="header-anchor">$</a></h3><ol><li><p>页面链接</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"empEdit/$&#123;emp.id &#125;"</span>&gt;</span>Edit<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>控制器方法</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"empEdit/&#123;id&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">editEmp</span><span class="hljs-params">(@PathVariable(value=<span class="hljs-string">"id"</span>)</span> Integer id, Map&lt;String, Object&gt;map) </span>&#123;</span><br><span class="line">map.put(<span class="hljs-string">"employee"</span>, employeeDao.get(id));</span><br><span class="line">map.put(<span class="hljs-string">"depts"</span>, departmentDao.getDepartments());</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"edit"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改页面</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="hljs-string">"java"</span> contentType=<span class="hljs-string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="hljs-string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="hljs-string">"form"</span> uri=<span class="hljs-string">"http://www.springframework.org/tags/form"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="hljs-string">"c"</span> uri=<span class="hljs-string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="hljs-string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;员工信息修改界面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form:form action=<span class="hljs-string">"$&#123;pageContext.request.contextPath &#125;/empUpdate"</span></span><br><span class="line">method=<span class="hljs-string">"POST"</span> modelAttribute=<span class="hljs-string">"employee"</span>&gt;</span><br><span class="line">  &lt;input type=<span class="hljs-string">"hidden"</span> name=<span class="hljs-string">"id"</span> value=<span class="hljs-string">"$&#123;employee.id &#125;"</span> /&gt;</span><br><span class="line">          &lt;input type=<span class="hljs-string">"hidden"</span> name=<span class="hljs-string">"_method"</span> value=<span class="hljs-string">"PUT"</span>&gt;</span><br><span class="line"> Email : &lt;form:input path=<span class="hljs-string">"email"</span> /&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Gender:  男&lt;form:radiobutton path=<span class="hljs-string">"gender"</span> value=<span class="hljs-string">"1"</span>/&gt;</span><br><span class="line">  女&lt;form:radiobutton path=<span class="hljs-string">"gender"</span> value=<span class="hljs-string">"0"</span>/&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line"> DeptName : </span><br><span class="line">                 &lt;form:select path="department.id" items="$&#123;depts &#125;" itemLabel="departmentName" itemValue="id"&gt;&lt;/form:select&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"Submit"</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br><span class="line">      </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><h3><span id="ti-jiao-biao-dan-xiu-gai-shu-ju">提交表单，修改数据</span><a href="#ti-jiao-biao-dan-xiu-gai-shu-ju" class="header-anchor">$</a></h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"empUpdate"</span>,method=RequestMethod.PUT)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateEmp</span><span class="hljs-params">(Employee employee)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(employee);</span><br><span class="line">employeeDao.save(employee);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/retrieveEmps"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@ModelAttribute</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myModelAttribute</span><span class="hljs-params">(@RequestParam(value=<span class="hljs-string">"id"</span>, required=<span class="hljs-keyword">false</span>)</span> Integer id,</span></span><br><span class="line"><span class="hljs-function">Model model</span></span><br><span class="line"><span class="hljs-function">) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(id!=<span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">Employee employee = employeeDao.get(id);</span><br><span class="line">model.addAttribute(<span class="hljs-string">"employee"</span>, employee);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="restrul-crud-shan-chu-cao-zuo-amp-chu-li-jing-tai-zi-yuan">RESTRUL_CRUD_删除操作&amp;处理静态资源</span><a href="#restrul-crud-shan-chu-cao-zuo-amp-chu-li-jing-tai-zi-yuan" class="header-anchor">$</a></h2><h3><span id="shan-chu-shi-yan-dai-ma">删除实验代码</span><a href="#shan-chu-shi-yan-dai-ma" class="header-anchor">$</a></h3><ol><li><p>页面链接</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/empDelete/$&#123;emp.id &#125;"</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>控制器方法</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"delEmp/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">delEmp</span><span class="hljs-params">(@PathVariable(value=<span class="hljs-string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">employeeDao.delete(id);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/retrieveEmps"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3><span id="hiddenhttpmethodfilter-guo-lu-qi">HiddenHttpMethodFilter过滤器</span><a href="#hiddenhttpmethodfilter-guo-lu-qi" class="header-anchor">$</a></h3><ul><li><mark>发起请求，无法执行，因为delete请求必须通过post请求转换为delete请求，借助：HiddenHttpMethodFilter过滤器</mark></li></ul><h3><span id="xu-yao-shi-yong-jquery-lai-zhuan-huan-qing-qiu-fang-shi">需要使用jQuery来转换请求方式</span><a href="#xu-yao-shi-yong-jquery-lai-zhuan-huan-qing-qiu-fang-shi" class="header-anchor">$</a></h3><ol><li>加入jQuery库文件<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/scripts/jquery-1.9.1.min.js</span><br></pre></td></tr></table></figure></li><li>jQuery库文件不起作用<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">警告: No mapping found for HTTP request with URI [/SpringMVC_03_RESTFul_CRUD/scripts/jquery-1.9.1.min.js] in DispatcherServlet with name &apos;springDispatcherServlet&apos;</span><br></pre></td></tr></table></figure></li><li>解决方法，SpringMVC 处理静态资源<blockquote><p>SpringMVC 处理静态资源:</p><blockquote><p>a)为什么会有这样的问题:</p><pre><code>优雅的 REST 风格的资源URL 不希望带 .html 或 .do 等后缀  若将 DispatcherServlet 请求映射配置为 /, 则 Spring MVC 将捕获 WEB 容器的所有请求, 包括静态资源的请求, SpringMVC 会将他们当成一个普通请求处理, 因找不到对应处理器将导致错误。</code></pre><p>b)解决: 在 SpringMVC 的配置文件中配置 <a href="mvc:default-servlet-handler/" target="_blank" rel="noopener">mvc:default-servlet-handler/</a></p></blockquote></blockquote></li><li>配置后，原来的请求又不好使了<figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- 在前端控制器对应的配置文件，增加 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="guan-yu-mvc-default-servlet-handler-zuo-yong">关于作用</span><a href="#guan-yu-mvc-default-servlet-handler-zuo-yong" class="header-anchor">$</a></h3></li></ol><blockquote><p><a href="mvc:default-servlet-handler/" target="_blank" rel="noopener">mvc:default-servlet-handler/</a> 将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler，<br>它会对进入 DispatcherServlet 的请求进行筛查，如果发现是没有经过映射的请求，<br>就将该请求交由 WEB 应用服务器默认的 Servlet 处理，如果不是静态资源的请求，才由 DispatcherServlet 继续处理<br>一般 WEB 应用服务器默认的 Servlet 的名称都是 default。<br>若所使用的 WEB 服务器的默认 Servlet 名称不是 default，则需要通过 default-servlet-name 属性显式指定<br>参考：CATALINA_HOME/config/web.xml</p></blockquote><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>debug<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>listings<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该标签属性default-servlet-name默认值是”default”,可以省略。<br><a href="mvc:default-servlet-handler/" target="_blank" rel="noopener">mvc:default-servlet-handler/</a>        </p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> <span class="hljs-attr">default-servlet-name</span>=<span class="hljs-string">"default"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="tong-guo-jquery-zhuan-huan-wei-delete-qing-qiu">通过jQuery转换为DELETE请求</span><a href="#tong-guo-jquery-zhuan-huan-wei-delete-qing-qiu" class="header-anchor">$</a></h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"delete"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"empDelete/$&#123;emp.id &#125;"</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">""</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"_method"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"DELETE"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"scripts/jquery-1.9.1.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">$(<span class="hljs-string">".delete"</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">var</span> href = $(<span class="hljs-keyword">this</span>).attr(<span class="hljs-string">"href"</span>);</span></span><br><span class="line"><span class="hljs-javascript">$(<span class="hljs-string">"form"</span>).attr(<span class="hljs-string">"action"</span>,href).submit();</span></span><br><span class="line"><span class="hljs-actionscript"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;tocStart&quot;&gt;&lt;/div&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#restrul-crud-xu-qiu&quot;&gt;RESTRUL_CRUD_需求&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#xian-shi-suo-you-yuan-gong-xin-xi&quot;&gt;显示所有员工信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tian-jia-yuan-gong-xin-xi&quot;&gt;添加员工信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shan-chu-cao-zuo&quot;&gt;删除操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#xiu-gai-cao-zuo-lastname-bu-ke-xiu-gai&quot;&gt;修改操作：lastName 不可修改！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#xiang-guan-de-lei&quot;&gt;相关的类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#xiang-guan-ye-mian&quot;&gt;相关页面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#restrul-crud-xian-shi-suo-you-yuan-gong-xin-xi&quot;&gt;RESTRUL_CRUD_显示所有员工信息&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#da-jian-kai-fa-huan-jing&quot;&gt;搭建开发环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#xian-shi-suo-you-yuan-gong-xin-xi-1&quot;&gt;显示所有员工信息&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shi-yong-spring-de-biao-dan-biao-qian&quot;&gt;使用 Spring的表单标签&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#restrul-crud-tian-jia-cao-zuo-biao-dan-biao-qian&quot;&gt;RESTRUL_CRUD_添加操作&amp;amp;表单标签&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#restrul-crud-shan-chu-cao-zuo-chu-li-jing-tai-zi-yuan&quot;&gt;RESTRUL_CRUD_删除操作&amp;amp;处理静态资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#restrul-crud-xiu-gai-cao-zuo&quot;&gt;RESTRUL_CRUD_修改操作&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#gen-ju-id-cha-xun-yuan-gong-dui-xiang-biao-dan-hui-xian&quot;&gt;根据id查询员工对象，表单回显&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ti-jiao-biao-dan-xiu-gai-shu-ju&quot;&gt;提交表单，修改数据&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#restrul-crud-shan-chu-cao-zuo-chu-li-jing-tai-zi-yuan-1&quot;&gt;RESTRUL_CRUD_删除操作&amp;amp;处理静态资源&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#shan-chu-shi-yan-dai-ma&quot;&gt;删除实验代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hiddenhttpmethodfilter-guo-lu-qi&quot;&gt;HiddenHttpMethodFilter过滤器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#xu-yao-shi-yong-jquery-lai-zhuan-huan-qing-qiu-fang-shi&quot;&gt;需要使用jQuery来转换请求方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#guan-yu-mvc-default-servlet-handler-zuo-yong&quot;&gt;关于&lt;a href=&quot;mvc:default-servlet-handler/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mvc:default-servlet-handler/&lt;/a&gt;作用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tong-guo-jquery-zhuan-huan-wei-delete-qing-qiu&quot;&gt;通过jQuery转换为DELETE请求&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;div class=&quot;tocEnd&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;RESTRUL-CRUD-需求&quot;&gt;&lt;a href=&quot;#RESTRUL-CRUD-需求&quot; class=&quot;headerlink&quot; title=&quot;RESTRUL_CRUD_需求&quot;&gt;&lt;/a&gt;RESTRUL_CRUD_需求&lt;/h2&gt;&lt;h3 id=&quot;显示所有员工信息&quot;&gt;&lt;a href=&quot;#显示所有员工信息&quot; class=&quot;headerlink&quot; title=&quot;显示所有员工信息&quot;&gt;&lt;/a&gt;显示所有员工信息&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;URI: emps&lt;/li&gt;
&lt;li&gt;请求方式：GET&lt;/li&gt;
&lt;li&gt;显示效果&lt;br&gt;  &lt;img src=&quot;https://gitee.com//lyhcc/Images/raw/master/img/20200225160721.png&quot; alt&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring MVC" scheme="https://lyhcc.github.io/categories/Spring-MVC/"/>
    
    
      <category term="SpringMVC之RESTful实现CRUD" scheme="https://lyhcc.github.io/tags/SpringMVC%E4%B9%8BRESTful%E5%AE%9E%E7%8E%B0CRUD/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC之视图解析器</title>
    <link href="https://lyhcc.github.io/post/652cd08.html"/>
    <id>https://lyhcc.github.io/post/652cd08.html</id>
    <published>2020-02-22T04:19:24.133Z</published>
    <updated>2020-02-23T15:12:49.917Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#springmvc-ru-he-jie-xi-shi-tu-gai-shu">SpringMVC如何解析视图概述</a></li><li><a href="#shi-tu-he-shi-tu-jie-xi-qi">视图和视图解析器</a></li><li><a href="#shi-tu">视图</a></li><li><a href="#chang-yong-de-shi-tu-shi-xian-lei">常用的视图实现类</a></li><li><a href="#shi-tu-jie-xi-qi">视图解析器</a></li><li><a href="#chang-yong-de-shi-tu-jie-xi-lei-shi-xian-lei">常用的视图解析类实现类</a></li><li><a href="#spring-mvc-shi-tu-jie-xi-qi-zhi-qian-zhui">Spring MVC视图解析器之前缀</a><ul><li><a href="#forward">forward</a></li><li><a href="#chong-ding-xiang-redirect">重定向redirect</a></li></ul></li><li><a href="#jstlview">JstlView</a></li><li><a href="#shi-yan-dai-ma">实验代码</a></li><li><a href="#mvc-view-controller-biao-qian">mvc:view-controller标签</a></li><li><a href="#zi-ding-yi-shi-tu">自定义视图</a></li><li><a href="#shi-yan-dai-ma-1">实验代码</a></li><li><a href="#shi-tu-jie-xi-qi-yuan-ma-jie-xi">视图解析器源码解析</a></li></ul><!-- tocstop --></div><h2><span id="springmvc-ru-he-jie-xi-shi-tu-gai-shu">SpringMVC如何解析视图概述</span><a href="#springmvc-ru-he-jie-xi-shi-tu-gai-shu" class="header-anchor">$</a></h2><blockquote><ol><li>不论控制器返回一个String,ModelAndView,View都会转换为ModelAndView对象，由视图解析器解析视图，然后，进行页面的跳转。<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200223165150.png" alt>  </li><li>视图解析源码分析：重要的两个接口<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200223165245.png" alt><br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200223165318.png" alt></li><li>断点调式<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200223165414.png" alt><br>流程图<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200223165500.png" alt></li></ol></blockquote><h2><span id="shi-tu-he-shi-tu-jie-xi-qi">视图和视图解析器</span><a href="#shi-tu-he-shi-tu-jie-xi-qi" class="header-anchor">$</a></h2><ul><li>请求处理方法执行完成后，最终返回一个 ModelAndView 对象。对于那些返回 String，View 或 ModeMap 等类型的处理方法，<strong>Spring MVC 也会在内部将它们装配成一个 ModelAndView 对象</strong> ，它包含了逻辑名和模型对象的视图</li><li>Spring MVC 借助 <strong>视图解析器（ViewResolver）</strong> 得到最终的视图对象（View），最终的视图可以是 JSP ，也可能是 Excel、JFreeChart等各种表现形式的视图</li><li>对于最终究竟采取何种视图对象对模型数据进行渲染，处理器并不关心，处理器工作重点聚焦在生产模型数据的工作上，从而实现 MVC 的充分解耦</li></ul><h2><span id="shi-tu">视图</span><a href="#shi-tu" class="header-anchor">$</a></h2><ul><li><p>视图的作用是渲染模型数据，将模型里的数据以某种形式呈现给客户。</p></li><li><p>为了实现视图模型和具体实现技术的解耦，Spring 在 org.springframework.web.servlet 包中定义了一个高度抽象的 View 接口：<br>  <img src="https://gitee.com//lyhcc/Images/raw/master/img/20200223165837.png" alt></p></li><li><p>视图对象由视图解析器负责实例化。由于视图是无状态的，所以他们不会有线程安全的问题</p></li></ul><h2><span id="chang-yong-de-shi-tu-shi-xian-lei">常用的视图实现类</span><a href="#chang-yong-de-shi-tu-shi-xian-lei" class="header-anchor">$</a></h2><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200223165950.png" alt></p><h2><span id="shi-tu-jie-xi-qi">视图解析器</span><a href="#shi-tu-jie-xi-qi" class="header-anchor">$</a></h2><ul><li>SpringMVC 为逻辑视图名的解析提供了不同的策略，可以在 Spring WEB 上下文中配置一种或多种解析策略，并指定他们之间的先后顺序。每一种映射策略对应一个具体的视图解析器实现类。</li><li>视图解析器的作用比较单一：将逻辑视图解析为一个具体的视图对象。</li><li>所有的视图解析器都必须实现 ViewResolver 接口：<br>  <img src="https://gitee.com//lyhcc/Images/raw/master/img/20200223170057.png" alt></li></ul><h2><span id="chang-yong-de-shi-tu-jie-xi-lei-shi-xian-lei">常用的视图解析类实现类</span><a href="#chang-yong-de-shi-tu-jie-xi-lei-shi-xian-lei" class="header-anchor">$</a></h2><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200223170146.png" alt></p><ul><li>程序员可以选择一种视图解析器或混用多种视图解析器</li><li>每个视图解析器都实现了 Ordered 接口并开放出一个 order 属性，可以通过 order 属性指定解析器的优先顺序，order  越小优先级越高。</li><li>SpringMVC 会按视图解析器顺序的优先顺序对逻辑视图名进行解析，直到解析成功并返回视图对象，否则将抛出 ServletException 异常</li><li>InternalResourceViewResolver<ul><li>JSP 是最常见的视图技术，可以使用 InternalResourceViewResolve作为视图解析器：<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200223171501.png" alt></li></ul></li></ul><h2><span id="spring-mvc-shi-tu-jie-xi-qi-zhi-qian-zhui">Spring MVC视图解析器之前缀</span><a href="#spring-mvc-shi-tu-jie-xi-qi-zhi-qian-zhui" class="header-anchor">$</a></h2><h3><span id="forward">forward</span><a href="#forward" class="header-anchor">$</a></h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"hello"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"---------------------"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"./success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 转发到页面</span></span><br><span class="line"><span class="hljs-comment"> * /success.jsp转发到当前项目的success</span></span><br><span class="line"><span class="hljs-comment"> * 一定要加上/，如果不加就是相对路径</span></span><br><span class="line"><span class="hljs-comment"> * forward:/hello.jsp</span></span><br><span class="line"><span class="hljs-comment"> forward前缀不会有配置的前缀后缀拼接</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"handle01"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">handle01</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"handle01"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"forward:/success.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"handle02"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">handle02</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"handle02"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"forward:/handle01"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="chong-ding-xiang-redirect">重定向redirect</span><a href="#chong-ding-xiang-redirect" class="header-anchor">$</a></h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 重定向到success.jsp页面</span></span><br><span class="line"><span class="hljs-comment"> * 转发 forward: 转发的路径</span></span><br><span class="line"><span class="hljs-comment"> * 重定向 redirect： 重定向的路径</span></span><br><span class="line"><span class="hljs-comment"> * /success.jsp代表就是从当前项目下开始，SpringMVC会为路径自动的拼接上项目名</span></span><br><span class="line"><span class="hljs-comment"> * </span></span><br><span class="line"><span class="hljs-comment"> *  原生的servlet重定向需要添加项目名</span></span><br><span class="line"><span class="hljs-comment"> * response.sendRedirect("/success.jsp")</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/handle03"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">handle03</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"handle03"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/success.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/handle04"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">handle04</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"handle04"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/handle03"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="jstlview">JstlView</span><a href="#jstlview" class="header-anchor">$</a></h2><ul><li>导包导入jstl的时候自动创建为一个jstlView，可以快速方便支持国际化<ul><li>JavaWeb国际化步骤</li><li>得到一个Locale对象</li><li>使用ResourceBundle绑定国际化资源文件</li><li>使用ResourceBundle.getString(key);获取到国际化配置文件中的值</li><li>Web页面国际化，fmt标签来做<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt; fmt:setLocale&gt;</span><br><span class="line">&lt; fmt:setBundle &gt;</span><br><span class="line">&lt;fmt:message&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>使用jstlView<ul><li>让Spring管理国际化资源</li><li>去页面取值</li></ul></li></ul><hr><ul><li>若项目中使用了JSTL，则SpringMVC 会自动把视图由InternalResourceView转为 JstlView  （断点调试，将JSTL的jar包增加到项目中，视图解析器会自动修改为JstlView）</li><li>若使用 JSTL 的 fmt 标签则需要在 SpringMVC 的配置文件中配置国际化资源文件</li><li>若希望直接响应通过 SpringMVC 渲染的页面，可以使用 mvc:view-controller 标签实现</li></ul><p>*<em>注意：使用jstl国际化是，页面映射不能带前缀 *</em>  </p><h2><span id="shi-yan-dai-ma">实验代码</span><a href="#shi-yan-dai-ma" class="header-anchor">$</a></h2><table><thead><tr><th align="center">i18n.properties</th><th align="center">i18n_en_US.properties</th><th align="center">i18n_zh_CN.properties</th></tr></thead><tbody><tr><td align="center">i18n.username=username</td><td align="center">i18n.password=password</td><td align="center">i18n.username=Username</td></tr><tr><td align="center">i18n.password=Password</td><td align="center">i18n.username=\u7528\u6237\u540D</td><td align="center">i18n.password=\u5BC6\u7801</td></tr><tr><td align="center">1. 增加jstl标签 jar包（断点调试，这时的View对象就是JstlView）</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200223172451.png" alt></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2. 设置国际化资源文件</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"messageSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"basename"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"i18n"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">3. 控制器代码</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/login"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">4. 成功页面(/success.jsp)使用fmt标签库</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &lt;form action=<span class="hljs-string">""</span>&gt;</span><br><span class="line">&lt;fmt:message key="i18n.username"&gt;&lt;/fmt:message&gt;：&lt;input /&gt;</span><br><span class="line">&lt;fmt:message key="i18n.password"&gt;&lt;/fmt:message&gt;： &lt;input /&gt;</span><br><span class="line">&lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">'&lt;fmt:message key='</span>i18n.login<span class="hljs-string">'&gt;&lt;/fmt:message&gt;'</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">## mvc:view-controller标签</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">- 若希望直接响应通过 SpringMVC 渲染的页面，可以使用 mvc:view-controller 标签实现</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- 直接配置响应的页面：无需经过控制器来执行结果 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"/success"</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">"success"</span>/&gt;</span></span><br></pre></td></tr></table></figure></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">- 请求的路径：</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/SpringMVC_02_View/success</span><br></pre></td></tr></table></figure></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">- 配置<a href="mvc:view-controller" target="_blank" rel="noopener">mvc:view-controller</a>会导致其他请求路径失效</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">- 解决办法：</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- 在实际开发过程中都需要配置mvc:annotation-driven标签，后面讲，这里先配置上 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">##  自定义视图</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">- 自定义视图（需要加入SpringMVC，那么，一定需要实现框架的接口）</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">- 若希望使用 Excel 展示数据列表，仅需要扩展 SpringMVC 提供的 AbstractExcelView 或 AbstractJExcelView 即可。</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">- 实现 buildExcelDocument() 方法，在方法中使用模型数据对象构建 Excel 文档就可以了。</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">- AbstractExcelView 基于 POI API，而 AbstractJExcelView 是基于 JExcelAPI 的。</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">- 视图对象需要配置 IOC 容器中的一个 Bean，使用 BeanNameViewResolver 作为视图解析器即可</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">- 若希望直接在浏览器中直接下载 Excel 文档，则可以设置响应头 Content-Disposition 的值为 attachment;filename=xxx.xls</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200223224845.png" alt></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">## 实验代码</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1. 测试链接</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8200/SpringMVC_voewResolver/definitionView</span><br></pre></td></tr></table></figure></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2. 控制方法</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/definitionView"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"definitionView"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"hello:time"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">3. 自定义视图</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyView</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getContentType</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"text/html"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">render</span><span class="hljs-params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">response.getWriter().write(<span class="hljs-string">"This is MyView, And Time is "</span> + <span class="hljs-keyword">new</span> Date().toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">4. 自定义视图解析器</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyResourceResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ViewResolver</span>, <span class="hljs-title">Ordered</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> order;</span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">resolveViewName</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (viewName.startsWith(<span class="hljs-string">"hello:"</span>)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyView();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getOrder</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOrder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> order)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.order = order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">5. 声明视图解析器</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"xyz.lyhcc.MyResourceResolver"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"order"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"10"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">——</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><strong>注意：InternalResourceViewResolver默认的优先级：private int order = Integer.MAX_VALUE;</strong></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2><span id="shi-tu-jie-xi-qi-yuan-ma-jie-xi">视图解析器源码解析</span><a href="#shi-tu-jie-xi-qi-yuan-ma-jie-xi" class="header-anchor">$</a></h2><ol><li>方法执行后的返回值会作为页面地址参考，转发或者重定向到页面</li><li>视图解析器可能会进行页面地址拼串</li></ol><hr><ol><li><p>任何方法的返回值，最终都会被包装成ModelAndView对象</p></li><li><p>processDispatchResult(HttpServletRequest request, HttpServletResponse response,HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception)</p><blockquote><p>视图渲染流程：将域中的数据页面显示，页面就是渲染模型数据</p></blockquote></li><li><p>render(mv, request, response);</p></li><li><p>View与ViewResolver:</p><blockquote><p>ViewResolver对象就是根据视图名返回View对象<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200223124301.png" alt></p></blockquote></li><li><p>怎么能根据方法的返回值得到View对象？</p> <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">      <span class="hljs-function"><span class="hljs-keyword">protected</span> View <span class="hljs-title">resolveViewName</span><span class="hljs-params">(String viewName, Map&lt;String, Object&gt; model, Locale locale,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="hljs-comment">//遍历所有resolver</span></span><br><span class="line"><span class="hljs-keyword">for</span> (ViewResolver viewResolver : <span class="hljs-keyword">this</span>.viewResolvers) &#123;</span><br><span class="line">    <span class="hljs-comment">//ViewResolver视图解析器根据方法的返回值，得到一个View对象</span></span><br><span class="line">View view = viewResolver.resolveViewName(viewName, locale);</span><br><span class="line"><span class="hljs-keyword">if</span> (view != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> view;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>viewResolver.resolveViewName细节 <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">   <span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">resolveViewName</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (!isCache()) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> createView(viewName, locale);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">Object cacheKey = getCacheKey(viewName, locale);</span><br><span class="line">View view = <span class="hljs-keyword">this</span>.viewAccessCache.get(cacheKey);</span><br><span class="line"><span class="hljs-keyword">if</span> (view == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.viewCreationCache) &#123;</span><br><span class="line">view = <span class="hljs-keyword">this</span>.viewCreationCache.get(cacheKey);</span><br><span class="line"><span class="hljs-keyword">if</span> (view == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-comment">// Ask the subclass to create the View object.</span></span><br><span class="line"><span class="hljs-comment">/*****创建******/</span></span><br><span class="line">view = createView(viewName, locale);</span><br><span class="line"><span class="hljs-keyword">if</span> (view == <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.cacheUnresolved) &#123;</span><br><span class="line">view = UNRESOLVED_VIEW;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (view != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.viewAccessCache.put(cacheKey, view);</span><br><span class="line"><span class="hljs-keyword">this</span>.viewCreationCache.put(cacheKey, view);</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="hljs-string">"Cached view ["</span> + cacheKey + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> (view != UNRESOLVED_VIEW ? view : <span class="hljs-keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建View的细节 <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">       <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> View <span class="hljs-title">createView</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="hljs-comment">// If this resolver is not supposed to handle the given view,</span></span><br><span class="line"><span class="hljs-comment">// return null to pass on to the next resolver in the chain.</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!canHandle(viewName, locale)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Check for special "redirect:" prefix.</span></span><br><span class="line"><span class="hljs-comment">/********/</span></span><br><span class="line"><span class="hljs-keyword">if</span> (viewName.startsWith(REDIRECT_URL_PREFIX)) &#123;</span><br><span class="line">String redirectUrl = viewName.substring(REDIRECT_URL_PREFIX.length());</span><br><span class="line">RedirectView view = <span class="hljs-keyword">new</span> RedirectView(redirectUrl, isRedirectContextRelative(), isRedirectHttp10Compatible());</span><br><span class="line"><span class="hljs-keyword">return</span> applyLifecycleMethods(viewName, view);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Check for special "forward:" prefix.</span></span><br><span class="line"><span class="hljs-keyword">if</span> (viewName.startsWith(FORWARD_URL_PREFIX)) &#123;</span><br><span class="line">String forwardUrl = viewName.substring(FORWARD_URL_PREFIX.length());</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> InternalResourceView(forwardUrl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Else fall back to superclass implementation: calling loadView.</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.createView(viewName, locale);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>**视图解析器得到View的流程**    &gt; 所有配置的视图解析器都来尝试根据视图名（返回值）得到View对象      &gt; 如果能得到就返回，得不到就换下一个视图解析器      &gt; 再调用View对象的Render,</code></pre></li></ol></li><li><p>View中的render得到</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-meta">@Override</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">render</span><span class="hljs-params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">   logger.trace(<span class="hljs-string">"Rendering view with name '"</span> + <span class="hljs-keyword">this</span>.beanName + <span class="hljs-string">"' with model "</span> + model +</span><br><span class="line">   <span class="hljs-string">" and static attributes "</span> + <span class="hljs-keyword">this</span>.staticAttributes);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Map&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);</span><br><span class="line"></span><br><span class="line">   prepareResponse(request, response);</span><br><span class="line">   <span class="hljs-comment">//渲染页面输出的所有数据</span></span><br><span class="line">   renderMergedOutputModel(mergedModel, request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>renderMergedOutputModel位于InternalResourceView</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">       <span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">renderMergedOutputModel</span><span class="hljs-params">(</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Determine which request handle to expose to the RequestDispatcher.</span></span><br><span class="line">HttpServletRequest requestToExpose = getRequestToExpose(request);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// *** Expose the model object as request attributes.</span></span><br><span class="line"><span class="hljs-comment">//将模型的数据放到request域中</span></span><br><span class="line">exposeModelAsRequestAttributes(model, requestToExpose);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Expose helpers as request attributes, if any.</span></span><br><span class="line">exposeHelpers(requestToExpose);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Determine the path for the request dispatcher.</span></span><br><span class="line">String dispatcherPath = prepareForRendering(requestToExpose, response);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Obtain a RequestDispatcher for the target resource (typically a JSP).</span></span><br><span class="line">RequestDispatcher rd = getRequestDispatcher(requestToExpose, dispatcherPath);</span><br><span class="line"><span class="hljs-keyword">if</span> (rd == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ServletException(<span class="hljs-string">"Could not get RequestDispatcher for ["</span> + getUrl() +</span><br><span class="line"><span class="hljs-string">"]: Check that the corresponding file exists within your web application archive!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// If already included or response already committed, perform include, else forward.</span></span><br><span class="line"><span class="hljs-keyword">if</span> (useInclude(requestToExpose, response)) &#123;</span><br><span class="line">response.setContentType(getContentType());</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Including resource ["</span> + getUrl() + <span class="hljs-string">"] in InternalResourceView '"</span> + getBeanName() + <span class="hljs-string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">rd.include(requestToExpose, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Note: The forwarded resource is supposed to determine the content type itself.</span></span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Forwarding to resource ["</span> + getUrl() + <span class="hljs-string">"] in InternalResourceView '"</span> + getBeanName() + <span class="hljs-string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">rd.forward(requestToExpose, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为什么数据可以在请求域中获得</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exposeModelAsRequestAttributes</span><span class="hljs-params">(Map&lt;String, Object&gt; model, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : model.entrySet()) &#123;</span><br><span class="line">String modelName = entry.getKey();</span><br><span class="line">Object modelValue = entry.getValue();</span><br><span class="line"><span class="hljs-keyword">if</span> (modelValue != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">request.setAttribute(modelName, modelValue);</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Added model object '"</span> + modelName + <span class="hljs-string">"' of type ["</span> + modelValue.getClass().getName() +</span><br><span class="line"><span class="hljs-string">"] to request in view with name '"</span> + getBeanName() + <span class="hljs-string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">request.removeAttribute(modelName);</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Removed model object '"</span> + modelName +</span><br><span class="line"><span class="hljs-string">"' from request in view with name '"</span> + getBeanName() + <span class="hljs-string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><p>视图解析器只是为了获得视图对象；视图对象才能真正的转发(将模型数据全部放在请求域中)或者重定向到页面<br>视图对象才能真正渲染视图<br>源码执行流程<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200223132633.png" alt></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#springmvc-ru-he-jie-xi-shi-tu-gai-shu&quot;&gt;SpringMVC如何解析视图概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shi-tu-h
      
    
    </summary>
    
    
      <category term="Spring MVC" scheme="https://lyhcc.github.io/categories/Spring-MVC/"/>
    
    
      <category term="SpringMVC之视图解析器" scheme="https://lyhcc.github.io/tags/SpringMVC%E4%B9%8B%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC之ModelAttribute</title>
    <link href="https://lyhcc.github.io/post/548d7f45.html"/>
    <id>https://lyhcc.github.io/post/548d7f45.html</id>
    <published>2020-02-20T08:34:13.329Z</published>
    <updated>2020-02-20T11:53:08.282Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#modelattribute-shi-yan-chang-jing">@ModelAttribute实验场景</a></li><li><a href="#modelattribute-zhu-jie-zhi-shi-li-dai-ma">@ModelAttribute注解之示例代码</a><ul><li><a href="#modelattribute-de-yun-xing-liu-cheng">ModelAttribute的运行流程</a></li></ul></li><li><a href="#modelattribute-yuan-ma-can-kao">@ModelAttribute源码参考</a></li><li><a href="#modelattribute-zhu-jie-zhi-yuan-ma-fen-xi">@ModelAttribute注解之源码分析</a></li><li><a href="#springmvc-que-ding-mu-biao-fang-fa-pojo-lei-xing-ru-can-de-guo-cheng">SpringMVC 确定目标方法POJO类型入参的过程</a></li><li><a href="#sessionattributes-zhu-jie-yin-fa-de-yi-chang">@sessionAttributes注解引发的异常</a></li></ul><!-- tocstop --></div><h2><span id="modelattribute-shi-yan-chang-jing">@ModelAttribute实验场景</span><a href="#modelattribute-shi-yan-chang-jing" class="header-anchor">$</a></h2><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200220163630.png" alt><br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200220163657.png" alt></p><a id="more"></a><h2><span id="modelattribute-zhu-jie-zhi-shi-li-dai-ma">@ModelAttribute注解之示例代码</span><a href="#modelattribute-zhu-jie-zhi-shi-li-dai-ma" class="header-anchor">$</a></h2><ul><li>在方法定义上使用 @ModelAttribute 注解：Spring MVC 在调用目标处理方法前，会先逐个调用在方法级上标注了 @ModelAttribute 的方法。</li><li>在方法的入参前使用 @ModelAttribute 注解：可以从隐含对象中获取隐含的模型数据中获取对象，再将请求参数绑定到对象中，再传入入参</li><li>将方法入参对象添加到模型中<ol><li>页面表单代码 <figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">" testPOJO"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"POST"</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="line">       username: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="line">       password: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pwd"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">       gender: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"gender"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Submit"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>增加ModelAttribute注解 <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"testPOJO"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testPOJO</span><span class="hljs-params">(@ModelAttribute(<span class="hljs-string">"person"</span>)</span> Person person) </span>&#123;</span><br><span class="line">    System.out.println(person);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@ModelAttribute</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getPerson</span><span class="hljs-params">(@RequestParam(value=<span class="hljs-string">"id"</span>,required=<span class="hljs-keyword">false</span>)</span>String id,Map&lt;String, Object&gt; map) </span>&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"ModelAttribute方法运行..."</span>);</span><br><span class="line">    Person person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"as"</span>, <span class="hljs-string">"12"</span>, <span class="hljs-string">"qw"</span>, <span class="hljs-string">"asas"</span>);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">    map.put(<span class="hljs-string">"person"</span>, person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3><span id="modelattribute-de-yun-xing-liu-cheng">ModelAttribute的运行流程</span><a href="#modelattribute-de-yun-xing-liu-cheng" class="header-anchor">$</a></h3><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200220163259.png" alt></p><h2><span id="modelattribute-yuan-ma-can-kao">@ModelAttribute源码参考</span><a href="#modelattribute-yuan-ma-can-kao" class="header-anchor">$</a></h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Target</span>(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</span><br><span class="line"><span class="hljs-meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="hljs-meta">@Documented</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ModelAttribute &#123;</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * The name of the model attribute to bind to.</span></span><br><span class="line"><span class="hljs-comment"> * &lt;p&gt;The default model attribute name is inferred from the declared</span></span><br><span class="line"><span class="hljs-comment"> * attribute type (i.e. the method parameter type or method return type),</span></span><br><span class="line"><span class="hljs-comment"> * based on the non-qualified class name:</span></span><br><span class="line"><span class="hljs-comment"> * e.g. "orderAddress" for class "mypackage.OrderAddress",</span></span><br><span class="line"><span class="hljs-comment"> * or "orderAddressList" for "List&amp;lt;mypackage.OrderAddress&amp;gt;".</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> ""</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="modelattribute-zhu-jie-zhi-yuan-ma-fen-xi">@ModelAttribute注解之源码分析</span><a href="#modelattribute-zhu-jie-zhi-yuan-ma-fen-xi" class="header-anchor">$</a></h2><blockquote><p>源代码分析的流程</p><p>① 调用 @ModelAttribute 注解修饰的方法. 实际上把 @ModelAttribute 方法中 Map 中的数据放在了 implicitModel 中.</p><p>② 解析请求处理器的目标参数, 实际上该目标参数来自于 WebDataBinder 对象的 target 属性</p><ol><li><p>创建 WebDataBinder 对象:</p><ol><li><p>确定 objectName 属性: 若传入的 attrName 属性值为 “”, 则objectName 为类名第一个字母小写. </p><ul><li>注意: attrName. 若目标方法的 POJO 属性使用了 @ModelAttribute 来修饰, 则 attrName 值即为 @ModelAttribute 的 value 属性值   </li></ul></li><li><p>确定 target 属性:</p><blockquote><p> 在 implicitModel 中查找 attrName 对应的属性值. 若存在, ok</p><p>若不存在: 则验证当前 Handler 是否使用了 @SessionAttributes 进行修饰, 若使用了, 则尝试从 Session 中获取 attrName 所对应的属性值. </p></blockquote><blockquote><p>若 session 中没有对应的属性值, 则抛出了异常. </p></blockquote><blockquote><p>若 Handler 没有使用 @SessionAttributes 进行修饰, 或 @SessionAttributes 中没有使用 value 值指定的 key和 attrName 相匹配, 则通过反射创建了 POJO 对象  </p></blockquote></li></ol></li><li><p>. SpringMVC 把表单的请求参数赋给了 WebDataBinder 的 target 对应的属性. </p></li><li><p>SpringMVC 会把 WebDataBinder 的 attrName 和 target 给到 implicitModel. 进而传到 request 域对象中.</p></li><li><p>把 WebDataBinder 的 target 作为参数传递给目标方法的入参. </p></li></ol></blockquote><h2><span id="springmvc-que-ding-mu-biao-fang-fa-pojo-lei-xing-ru-can-de-guo-cheng">SpringMVC 确定目标方法POJO类型入参的过程</span><a href="#springmvc-que-ding-mu-biao-fang-fa-pojo-lei-xing-ru-can-de-guo-cheng" class="header-anchor">$</a></h2><p>① 确定一个 key:</p><p>​      1). 若目标方法的 POJO 类型的参数木有使用 @ModelAttribute 作为修饰, 则 key 为 POJO 类名第一个字母的小写</p><p>​      2). 若使用了@ModelAttribute 来修饰, 则 key 为 @ModelAttribute 注解的 value 属性值. </p><p>② 在 implicitModel 中查找 key 对应的对象, 若存在, 则作为入参传入</p><ul><li>若在 @ModelAttribute 标记的方法中在 Map 中保存过, 且 key 和 ① 确定的 key 一致, 则会获取到. </li></ul><p>③ 若 implicitModel 中不存在 key 对应的对象, 则检查当前的 Handler 是否使用 @SessionAttributes 注解修饰, </p><p>④ 若使用了该注解, 且 @SessionAttributes 注解的 value 属性值中包含了 key, 则会从 HttpSession 中来获取 key 所对应的 value 值, 若存在则直接传入到目标方法的入参中. 若不存在则将抛出异常. </p><p>⑤ 若 Handler 没有标识 @SessionAttributes 注解或 @SessionAttributes 注解的 value 值中不包含 key, 则会通过反射来创建 POJO 类型的参数, 传入为目标方法的参数</p><p>⑥ SpringMVC 会把 key 和 POJO 类型的对象保存到 implicitModel 中, 进而会保存到 request 中. </p><h2><span id="sessionattributes-zhu-jie-yin-fa-de-yi-chang">@sessionAttributes注解引发的异常</span><a href="#sessionattributes-zhu-jie-yin-fa-de-yi-chang" class="header-anchor">$</a></h2><ol><li><p>由@SessionAttributes引发的异常</p><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200220194314.png" alt></p></li><li><p>① 果在处理类定义处标注了@SessionAttributes(“xxx”)，则尝试从会话中获取该属性，并将其赋给该入参，然后再用请求消息填充该入参对象。如果在会话中找不到对应的属性，则抛出 HttpSessionRequiredException 异常</p><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200220194505.png" alt></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;tocStart&quot;&gt;&lt;/div&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#modelattribute-shi-yan-chang-jing&quot;&gt;@ModelAttribute实验场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#modelattribute-zhu-jie-zhi-shi-li-dai-ma&quot;&gt;@ModelAttribute注解之示例代码&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#modelattribute-de-yun-xing-liu-cheng&quot;&gt;ModelAttribute的运行流程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#modelattribute-yuan-ma-can-kao&quot;&gt;@ModelAttribute源码参考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#modelattribute-zhu-jie-zhi-yuan-ma-fen-xi&quot;&gt;@ModelAttribute注解之源码分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#springmvc-que-ding-mu-biao-fang-fa-pojo-lei-xing-ru-can-de-guo-cheng&quot;&gt;SpringMVC 确定目标方法POJO类型入参的过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sessionattributes-zhu-jie-yin-fa-de-yi-chang&quot;&gt;@sessionAttributes注解引发的异常&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;div class=&quot;tocEnd&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;ModelAttribute实验场景&quot;&gt;&lt;a href=&quot;#ModelAttribute实验场景&quot; class=&quot;headerlink&quot; title=&quot;@ModelAttribute实验场景&quot;&gt;&lt;/a&gt;@ModelAttribute实验场景&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com//lyhcc/Images/raw/master/img/20200220163630.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://gitee.com//lyhcc/Images/raw/master/img/20200220163657.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Sprig MVC" scheme="https://lyhcc.github.io/categories/Sprig-MVC/"/>
    
    
      <category term="SpringMVC之ModelAttribute" scheme="https://lyhcc.github.io/tags/SpringMVC%E4%B9%8BModelAttribute/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC源码分析</title>
    <link href="https://lyhcc.github.io/post/eaa9b691.html"/>
    <id>https://lyhcc.github.io/post/eaa9b691.html</id>
    <published>2020-02-19T11:04:57.382Z</published>
    <updated>2020-02-21T16:37:55.587Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#spring-mvc-zhong-dispatchservlet-yun-xing-liu-cheng">Spring MVC中DispatchServlet运行流程</a></li><li><a href="#springmvc-jiu-da-zu-jian">SpringMVC九大组件</a></li></ul><!-- tocstop --></div><h2><span id="spring-mvc-zhong-dispatchservlet-yun-xing-liu-cheng">Spring MVC中DispatchServlet运行流程</span><a href="#spring-mvc-zhong-dispatchservlet-yun-xing-liu-cheng" class="header-anchor">$</a></h2><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200219190425.png" alt></p><p>​    <a id="more"></a></p><ol><li><p>doDispatch()详细细节</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HttpServletRequest processedRequest = request;</span><br><span class="line">HandlerExecutionChain mappedHandler = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">boolean</span> multipartRequestParsed = <span class="hljs-keyword">false</span>;</span><br><span class="line"></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">ModelAndView mv = <span class="hljs-keyword">null</span>;</span><br><span class="line">Exception dispatchException = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                <span class="hljs-comment">//1、 检查是否文件上传请求</span></span><br><span class="line">processedRequest = checkMultipart(request);</span><br><span class="line">multipartRequestParsed = processedRequest != request;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/****** Determine handler for the current request.*/</span></span><br><span class="line">                <span class="hljs-comment">//2、根据当前的请求地址找到那个类能来处理</span></span><br><span class="line">mappedHandler = getHandler(processedRequest);</span><br><span class="line"><span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-keyword">null</span> || mappedHandler.getHandler() == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                    <span class="hljs-comment">//3、如果没有找到处理器可以处理当前请求，抛出异常</span></span><br><span class="line">noHandlerFound(processedRequest, response);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Determine handler adapter for the current request.</span></span><br><span class="line">                <span class="hljs-comment">//4、拿到可以执行这个处理器类的所有方法的适配器（反射工具）</span></span><br><span class="line">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">String method = request.getMethod();</span><br><span class="line"><span class="hljs-keyword">boolean</span> isGet = <span class="hljs-string">"GET"</span>.equals(method);</span><br><span class="line"><span class="hljs-keyword">if</span> (isGet || <span class="hljs-string">"HEAD"</span>.equals(method)) &#123;</span><br><span class="line"><span class="hljs-keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">String requestUri = urlPathHelper.getRequestUri(request);</span><br><span class="line">logger.debug(<span class="hljs-string">"Last-Modified value for ["</span> + requestUri + <span class="hljs-string">"] is: "</span> + lastModified);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    <span class="hljs-comment">/************</span></span><br><span class="line"><span class="hljs-comment">                    ***注意：控制器执行*******</span></span><br><span class="line"><span class="hljs-comment">                    *************</span></span><br><span class="line"><span class="hljs-comment">                    */</span></span><br><span class="line">                    <span class="hljs-comment">//5、适配器来回显目标方法：将目标方法执行完成后的返回值作为视图名，设置保存到ModelAndView</span></span><br><span class="line">                    <span class="hljs-comment">//目标方法无论怎么写，最终适配器执行完后，都会封装为ModelAndView</span></span><br><span class="line"><span class="hljs-comment">// Actually invoke the handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">finally</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyDefaultViewName(request, mv);<span class="hljs-comment">//如果没有视图名，取默认</span></span><br><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">dispatchException = ex;</span><br><span class="line">&#125;</span><br><span class="line">             <span class="hljs-comment">/************</span></span><br><span class="line"><span class="hljs-comment">              ***注意：转发目标页面执行*******</span></span><br><span class="line"><span class="hljs-comment">              *************</span></span><br><span class="line"><span class="hljs-comment">             */</span></span><br><span class="line">            <span class="hljs-comment">//6、根据方法最终执行完成后封装的ModelAndView，转发到对应页面，而且ModelAndView中的数据可以从请求域中获取</span></span><br><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (Error err) &#123;</span><br><span class="line">triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">finally</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="hljs-comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line"><span class="hljs-keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">cleanupMultipart(processedRequest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol><li><p>所有请求过来DispatchServlet收到请求</p></li><li><p>调用doDispatch() 方法进行处理</p><ol><li><p>getHandler():  根据当前请求地址找到能处理这个请求的的目标的类（处理器）</p><p>​    根据当前请求在HandlerMapping中找到这个请求的映射信息，获取到目标处理器类</p></li><li><p>getHandlerAdapter(）：根据当前处理器获取到能执行这个处理器方法的适配器</p><p>根据当前处理器类，找到当前类的HandlerAdapter</p></li><li><p>使用当前获取到的适配器（RequestMappingHandlerAdapter）执行目标方法</p></li><li><p>目标方法执行后会返回一个ModelAndView对象</p></li><li><p>根据ModelAndView的信息转发到具体的页面，并可以在请求域中取出ModelAndView中的模型数据</p></li></ol></li></ol><hr></li></ol><ol start="2"><li><p>getHandler()细节：怎么根据当前请求就能找到哪个类能处理</p><blockquote><p>getHandler() 会返回目标处理器类的执行链</p></blockquote><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> HandlerExecutionChain <span class="hljs-title">getHandler</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//HandlerMappings处理器映射：他里面保存了每一个处理器能处理那些方法的映射信息</span></span><br><span class="line"><span class="hljs-keyword">for</span> (HandlerMapping hm : <span class="hljs-keyword">this</span>.handlerMappings) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(</span><br><span class="line"><span class="hljs-string">"Testing handler map ["</span> + hm + <span class="hljs-string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="hljs-string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">HandlerExecutionChain handler = hm.getHandler(request);</span><br><span class="line"><span class="hljs-keyword">if</span> (handler != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200221140852.png" alt></p><blockquote><p>handlerMap: ioc容器自动创建Controller对象的时候扫描每个处理器都能处理什么请求，保存在HandlerMapping的handlerMap属性中：下一次请求过来就来查看那个handlerMapping中有相应的请求映射信息</p></blockquote></li><li><p>getHandlerAdapter() 细节(如何找到目标处理器类的适配器？)</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> HandlerAdapter <span class="hljs-title">getHandlerAdapter</span><span class="hljs-params">(Object handler)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (HandlerAdapter ha : <span class="hljs-keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="hljs-string">"Testing handler adapter ["</span> + ha + <span class="hljs-string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (ha.supports(handler)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> ha;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ServletException(<span class="hljs-string">"No adapter for handler ["</span> + handler +</span><br><span class="line"><span class="hljs-string">"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200221141931.png" alt></p></li></ol><ol start="4"><li><p>研究HandlerMappings和HandlerAdapters如何获取值，</p><blockquote><p>可以在web.xml中修改DispatchServlet某些属性的默认配置</p></blockquote><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initHandlerMappings</span><span class="hljs-params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.handlerMappings = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.detectAllHandlerMappings) &#123;</span><br><span class="line"><span class="hljs-comment">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></span><br><span class="line">Map&lt;String, HandlerMapping&gt; matchingBeans =</span><br><span class="line">BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.handlerMappings = <span class="hljs-keyword">new</span> ArrayList&lt;HandlerMapping&gt;(matchingBeans.values());</span><br><span class="line"><span class="hljs-comment">// We keep HandlerMappings in sorted order.</span></span><br><span class="line">OrderComparator.sort(<span class="hljs-keyword">this</span>.handlerMappings);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);</span><br><span class="line"><span class="hljs-keyword">this</span>.handlerMappings = Collections.singletonList(hm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line"><span class="hljs-comment">// Ignore, we'll add a default HandlerMapping later.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Ensure we have at least one HandlerMapping, by registering</span></span><br><span class="line"><span class="hljs-comment">// a default HandlerMapping if no other mappings are found.</span></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.handlerMappings == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);</span><br><span class="line"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"No HandlerMappings found in servlet '"</span> + getServletName() + <span class="hljs-string">"': using default"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>组件的初始化：</p><p>​    有些组件是通过类型找，有些是通过id</p><p>​    去容器中找这个组件，如果没有找到就用默认配置</p></blockquote></li><li><p>如何调用目标方法？</p><ol><li>DispatcherServlet.doDispatch(HttpServletRequest, HttpServletResponse) line: 945    </li><li>AnnotationMethodHandlerAdapter.handle(HttpServletRequest, HttpServletResponse, Object) line: 406    </li><li></li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title">invokeHandlerMethod</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="hljs-comment">//拿到方法解析器</span></span><br><span class="line">ServletHandlerMethodResolver methodResolver = getMethodResolver(handler);</span><br><span class="line">    <span class="hljs-comment">//方法解析器根据当前请求地址找到真正的方法</span></span><br><span class="line">Method handlerMethod = methodResolver.resolveHandlerMethod(request);</span><br><span class="line">    <span class="hljs-comment">//创建方法执行器</span></span><br><span class="line">ServletHandlerMethodInvoker methodInvoker = <span class="hljs-keyword">new</span> ServletHandlerMethodInvoker(methodResolver);</span><br><span class="line">    <span class="hljs-comment">//包装原生的response和request</span></span><br><span class="line">ServletWebRequest webRequest = <span class="hljs-keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">    <span class="hljs-comment">//创建隐含模型</span></span><br><span class="line">ExtendedModelMap implicitModel = <span class="hljs-keyword">new</span> BindingAwareModelMap();</span><br><span class="line"><span class="hljs-comment">//真正执行目标方法</span></span><br><span class="line">    <span class="hljs-comment">//目标方法执行期间利用反射执行期间确定参数值</span></span><br><span class="line">Object result = methodInvoker.invokeHandlerMethod(handlerMethod, handler, webRequest, implicitModel);</span><br><span class="line">ModelAndView mav =</span><br><span class="line">methodInvoker.getModelAndView(handlerMethod, handler.getClass(), result, implicitModel, webRequest);</span><br><span class="line">methodInvoker.updateModelAttributes(handler, (mav != <span class="hljs-keyword">null</span> ? mav.getModel() : <span class="hljs-keyword">null</span>), implicitModel, webRequest);</span><br><span class="line"><span class="hljs-keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>AnnotationMethodHandlerAdapter$ServletHandlerMethodInvoker(HandlerMethodInvoker).invokeHandlerMethod</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Object <span class="hljs-title">invokeHandlerMethod</span><span class="hljs-params">(Method handlerMethod, Object handler,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">NativeWebRequest webRequest, ExtendedModelMap implicitModel)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">Method handlerMethodToInvoke = BridgeMethodResolver.findBridgedMethod(handlerMethod);</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-keyword">boolean</span> debug = logger.isDebugEnabled();</span><br><span class="line"><span class="hljs-keyword">for</span> (String attrName : <span class="hljs-keyword">this</span>.methodResolver.getActualSessionAttributeNames()) &#123;</span><br><span class="line">Object attrValue = <span class="hljs-keyword">this</span>.sessionAttributeStore.retrieveAttribute(webRequest, attrName);</span><br><span class="line"><span class="hljs-keyword">if</span> (attrValue != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">implicitModel.addAttribute(attrName, attrValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="hljs-comment">/*************/</span></span><br><span class="line">            <span class="hljs-comment">/*     获取Modelattribute标注的方法    */</span></span><br><span class="line">            <span class="hljs-comment">/*           */</span></span><br><span class="line">            <span class="hljs-comment">/*************/</span></span><br><span class="line"><span class="hljs-keyword">for</span> (Method attributeMethod : <span class="hljs-keyword">this</span>.methodResolver.getModelAttributeMethods()) &#123;</span><br><span class="line">                <span class="hljs-comment">//先确定modelattribute方法执行是要使用的每一个参数的值</span></span><br><span class="line">Method attributeMethodToInvoke = BridgeMethodResolver.findBridgedMethod(attributeMethod);</span><br><span class="line">                <span class="hljs-comment">//args</span></span><br><span class="line">Object[] args = resolveHandlerArguments(attributeMethodToInvoke, handler, webRequest, implicitModel);</span><br><span class="line"><span class="hljs-keyword">if</span> (debug) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Invoking model attribute method: "</span> + attributeMethodToInvoke);</span><br><span class="line">&#125;</span><br><span class="line">String attrName = AnnotationUtils.findAnnotation(attributeMethod, ModelAttribute.class).value();</span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-string">""</span>.equals(attrName) &amp;&amp; implicitModel.containsAttribute(attrName)) &#123;</span><br><span class="line"><span class="hljs-keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ReflectionUtils.makeAccessible(attributeMethodToInvoke);</span><br><span class="line">Object attrValue = attributeMethodToInvoke.invoke(handler, args);</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-string">""</span>.equals(attrName)) &#123;</span><br><span class="line">Class&lt;?&gt; resolvedType = GenericTypeResolver.resolveReturnType(attributeMethodToInvoke, handler.getClass());</span><br><span class="line">attrName = Conventions.getVariableNameForReturnType(attributeMethodToInvoke, resolvedType, attrValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (!implicitModel.containsAttribute(attrName)) &#123;</span><br><span class="line">implicitModel.addAttribute(attrName, attrValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Object[] args = resolveHandlerArguments(handlerMethodToInvoke, handler, webRequest, implicitModel);</span><br><span class="line"><span class="hljs-keyword">if</span> (debug) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Invoking request handler method: "</span> + handlerMethodToInvoke);</span><br><span class="line">&#125;</span><br><span class="line">ReflectionUtils.makeAccessible(handlerMethodToInvoke);</span><br><span class="line"><span class="hljs-keyword">return</span> handlerMethodToInvoke.invoke(handler, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line"><span class="hljs-comment">// Internal assertion failed (e.g. invalid signature):</span></span><br><span class="line"><span class="hljs-comment">// throw exception with full handler method context...</span></span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> HandlerMethodInvocationException(handlerMethodToInvoke, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line"><span class="hljs-comment">// User-defined @ModelAttribute/@InitBinder/@RequestMapping method threw an exception...</span></span><br><span class="line">ReflectionUtils.rethrowException(ex.getTargetException());</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>确定方法运行时使用的每一个参数值</li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">private</span> Object[] resolveHandlerArguments(Method handlerMethod, Object handler,</span><br><span class="line">NativeWebRequest webRequest, ExtendedModelMap implicitModel) <span class="hljs-keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;[] paramTypes = handlerMethod.getParameterTypes();</span><br><span class="line">    <span class="hljs-comment">//创建了一个和参数个数一样多的数组，用来保存每一个参数的值</span></span><br><span class="line">Object[] args = <span class="hljs-keyword">new</span> Object[paramTypes.length];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">MethodParameter methodParam = <span class="hljs-keyword">new</span> MethodParameter(handlerMethod, i);</span><br><span class="line">methodParam.initParameterNameDiscovery(<span class="hljs-keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">GenericTypeResolver.resolveParameterType(methodParam, handler.getClass());</span><br><span class="line">String paramName = <span class="hljs-keyword">null</span>;</span><br><span class="line">String headerName = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">boolean</span> requestBodyFound = <span class="hljs-keyword">false</span>;</span><br><span class="line">String cookieName = <span class="hljs-keyword">null</span>;</span><br><span class="line">String pathVarName = <span class="hljs-keyword">null</span>;</span><br><span class="line">String attrName = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">boolean</span> required = <span class="hljs-keyword">false</span>;</span><br><span class="line">String defaultValue = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">boolean</span> validate = <span class="hljs-keyword">false</span>;</span><br><span class="line">Object[] validationHints = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> annotationsFound = <span class="hljs-number">0</span>;</span><br><span class="line">Annotation[] paramAnns = methodParam.getParameterAnnotations();</span><br><span class="line"><span class="hljs-comment">//拿到所有注解，解析注解</span></span><br><span class="line"><span class="hljs-keyword">for</span> (Annotation paramAnn : paramAnns) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (RequestParam.class.isInstance(paramAnn)) &#123;</span><br><span class="line">RequestParam requestParam = (RequestParam) paramAnn;</span><br><span class="line">paramName = requestParam.value();</span><br><span class="line">required = requestParam.required();</span><br><span class="line">defaultValue = parseDefaultValueAttribute(requestParam.defaultValue());</span><br><span class="line">annotationsFound++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (RequestHeader.class.isInstance(paramAnn)) &#123;</span><br><span class="line">RequestHeader requestHeader = (RequestHeader) paramAnn;</span><br><span class="line">headerName = requestHeader.value();</span><br><span class="line">required = requestHeader.required();</span><br><span class="line">defaultValue = parseDefaultValueAttribute(requestHeader.defaultValue());</span><br><span class="line">annotationsFound++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (RequestBody.class.isInstance(paramAnn)) &#123;</span><br><span class="line">requestBodyFound = <span class="hljs-keyword">true</span>;</span><br><span class="line">annotationsFound++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (CookieValue.class.isInstance(paramAnn)) &#123;</span><br><span class="line">CookieValue cookieValue = (CookieValue) paramAnn;</span><br><span class="line">cookieName = cookieValue.value();</span><br><span class="line">required = cookieValue.required();</span><br><span class="line">defaultValue = parseDefaultValueAttribute(cookieValue.defaultValue());</span><br><span class="line">annotationsFound++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (PathVariable.class.isInstance(paramAnn)) &#123;</span><br><span class="line">PathVariable pathVar = (PathVariable) paramAnn;</span><br><span class="line">pathVarName = pathVar.value();</span><br><span class="line">annotationsFound++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ModelAttribute.class.isInstance(paramAnn)) &#123;</span><br><span class="line">ModelAttribute attr = (ModelAttribute) paramAnn;</span><br><span class="line">attrName = attr.value();</span><br><span class="line">annotationsFound++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Value.class.isInstance(paramAnn)) &#123;</span><br><span class="line">defaultValue = ((Value) paramAnn).value();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (paramAnn.annotationType().getSimpleName().startsWith(<span class="hljs-string">"Valid"</span>)) &#123;</span><br><span class="line">validate = <span class="hljs-keyword">true</span>;</span><br><span class="line">Object value = AnnotationUtils.getValue(paramAnn);</span><br><span class="line">validationHints = (value <span class="hljs-keyword">instanceof</span> Object[] ? (Object[]) value : <span class="hljs-keyword">new</span> Object[] &#123;value&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (annotationsFound &gt; <span class="hljs-number">1</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"Handler parameter annotations are exclusive choices - "</span> +</span><br><span class="line"><span class="hljs-string">"do not specify more than one such annotation on the same parameter: "</span> + handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//没有找到注解的情况</span></span><br><span class="line"><span class="hljs-keyword">if</span> (annotationsFound == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                <span class="hljs-comment">//解析普通参数</span></span><br><span class="line">Object argValue = resolveCommonArgument(methodParam, webRequest);--&gt;解析标准参数</span><br><span class="line"><span class="hljs-keyword">if</span> (argValue != WebArgumentResolver.UNRESOLVED) &#123;</span><br><span class="line">args[i] = argValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (defaultValue != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">args[i] = resolveDefaultValue(defaultValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">Class&lt;?&gt; paramType = methodParam.getParameterType();</span><br><span class="line"><span class="hljs-keyword">if</span> (Model.class.isAssignableFrom(paramType) || Map.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (!paramType.isAssignableFrom(implicitModel.getClass())) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"Argument ["</span> + paramType.getSimpleName() + <span class="hljs-string">"] is of type "</span> +</span><br><span class="line"><span class="hljs-string">"Model or Map but is not assignable from the actual model. You may need to switch "</span> +</span><br><span class="line"><span class="hljs-string">"newer MVC infrastructure classes to use this argument."</span>);</span><br><span class="line">&#125;</span><br><span class="line">args[i] = implicitModel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (SessionStatus.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">args[i] = <span class="hljs-keyword">this</span>.sessionStatus;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (HttpEntity.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">args[i] = resolveHttpEntityRequest(methodParam, webRequest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Errors.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"Errors/BindingResult argument declared "</span> +</span><br><span class="line"><span class="hljs-string">"without preceding model attribute. Check your handler method signature!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (BeanUtils.isSimpleProperty(paramType)) &#123;</span><br><span class="line">paramName = <span class="hljs-string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">attrName = <span class="hljs-string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (paramName != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (headerName != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (requestBodyFound) &#123;</span><br><span class="line">args[i] = resolveRequestBody(methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cookieName != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pathVarName != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">args[i] = resolvePathVariable(pathVarName, methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (attrName != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">WebDataBinder binder =</span><br><span class="line">resolveModelAttribute(attrName, methodParam, implicitModel, webRequest, handler);</span><br><span class="line"><span class="hljs-keyword">boolean</span> assignBindingResult = (args.length &gt; i + <span class="hljs-number">1</span> &amp;&amp; Errors.class.isAssignableFrom(paramTypes[i + <span class="hljs-number">1</span>]));</span><br><span class="line"><span class="hljs-keyword">if</span> (binder.getTarget() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">doBind(binder, webRequest, validate, validationHints, !assignBindingResult);</span><br><span class="line">&#125;</span><br><span class="line">args[i] = binder.getTarget();</span><br><span class="line"><span class="hljs-keyword">if</span> (assignBindingResult) &#123;</span><br><span class="line">args[i + <span class="hljs-number">1</span>] = binder.getBindingResult();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">implicitModel.putAll(binder.getBindingResult().getModel());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>如果没有注解：</strong> </p><ol><li>resolveCommonArgument)先看是否普通参数，确定当前的参数是否是原生API</li><li>如果是Map或者Map子类，将之前创建的隐含模型赋值过去</li></ol><hr><hr><p>方法上标注的ModelAttribute注解如果有value值</p><p>@ModelAttribute(value=”as”)</p><p>attrName=value标注值</p><p>标了：attrName=”abc”</p><p>没标：attrName=””;attrName就会变为返回值类型首字母小写</p><p>@ModelAttribute标在方法的另一个作用；可以把方法运行后的返回值按照@ModelAttribute(“abc”)放到隐含模型中，如果没有key就用返回值类型void</p><p>{person=Person [name=as, pwd=12, gender=qw, email=asas], void=null}</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Object <span class="hljs-title">invokeHandlerMethod</span><span class="hljs-params">(Method handlerMethod, Object handler,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">NativeWebRequest webRequest, ExtendedModelMap implicitModel)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">Method handlerMethodToInvoke = BridgeMethodResolver.findBridgedMethod(handlerMethod);</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"><span class="hljs-keyword">boolean</span> debug = logger.isDebugEnabled();</span><br><span class="line"><span class="hljs-keyword">for</span> (String attrName : <span class="hljs-keyword">this</span>.methodResolver.getActualSessionAttributeNames()) &#123;</span><br><span class="line">Object attrValue = <span class="hljs-keyword">this</span>.sessionAttributeStore.retrieveAttribute(webRequest, attrName);</span><br><span class="line"><span class="hljs-keyword">if</span> (attrValue != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">implicitModel.addAttribute(attrName, attrValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (Method attributeMethod : <span class="hljs-keyword">this</span>.methodResolver.getModelAttributeMethods()) &#123;</span><br><span class="line">Method attributeMethodToInvoke = BridgeMethodResolver.findBridgedMethod(attributeMethod);</span><br><span class="line">Object[] args = resolveHandlerArguments(attributeMethodToInvoke, handler, webRequest, implicitModel);</span><br><span class="line"><span class="hljs-keyword">if</span> (debug) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Invoking model attribute method: "</span> + attributeMethodToInvoke);</span><br><span class="line">&#125;</span><br><span class="line">String attrName = AnnotationUtils.findAnnotation(attributeMethod, ModelAttribute.class).value();</span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-string">""</span>.equals(attrName) &amp;&amp; implicitModel.containsAttribute(attrName)) &#123;</span><br><span class="line"><span class="hljs-keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ReflectionUtils.makeAccessible(attributeMethodToInvoke);</span><br><span class="line">                <span class="hljs-comment">//@ModelAttribute标注的方法先运行</span></span><br><span class="line">Object attrValue = attributeMethodToInvoke.invoke(handler, args);</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-string">""</span>.equals(attrName)) &#123;</span><br><span class="line">Class&lt;?&gt; resolvedType = GenericTypeResolver.resolveReturnType(attributeMethodToInvoke, handler.getClass());</span><br><span class="line">attrName = Conventions.getVariableNameForReturnType(attributeMethodToInvoke, resolvedType, attrValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (!implicitModel.containsAttribute(attrName)) &#123;</span><br><span class="line">implicitModel.addAttribute(attrName, attrValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Object[] args = resolveHandlerArguments(handlerMethodToInvoke, handler, webRequest, implicitModel);</span><br><span class="line"><span class="hljs-keyword">if</span> (debug) &#123;</span><br><span class="line">logger.debug(<span class="hljs-string">"Invoking request handler method: "</span> + handlerMethodToInvoke);</span><br><span class="line">&#125;</span><br><span class="line">ReflectionUtils.makeAccessible(handlerMethodToInvoke);</span><br><span class="line">            <span class="hljs-comment">//相应目标的方法运行</span></span><br><span class="line"><span class="hljs-keyword">return</span> handlerMethodToInvoke.invoke(handler, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line"><span class="hljs-comment">// Internal assertion failed (e.g. invalid signature):</span></span><br><span class="line"><span class="hljs-comment">// throw exception with full handler method context...</span></span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> HandlerMethodInvocationException(handlerMethodToInvoke, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line"><span class="hljs-comment">// User-defined @ModelAttribute/@InitBinder/@RequestMapping method threw an exception...</span></span><br><span class="line">ReflectionUtils.rethrowException(ex.getTargetException());</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="6"><li><p>如何确定方法的每一个参数的值</p><blockquote><p>标了注解：</p><p>&emsp;保存时哪个注解的信息确定值</p><p>&emsp;拿到ModelAttribute注解的值让attrName保存</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">private</span> Object[] resolveHandlerArguments(Method handlerMethod, Object handler,</span><br><span class="line">NativeWebRequest webRequest, ExtendedModelMap implicitModel) <span class="hljs-keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;[] paramTypes = handlerMethod.getParameterTypes();</span><br><span class="line">Object[] args = <span class="hljs-keyword">new</span> Object[paramTypes.length];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">MethodParameter methodParam = <span class="hljs-keyword">new</span> MethodParameter(handlerMethod, i);</span><br><span class="line">methodParam.initParameterNameDiscovery(<span class="hljs-keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">GenericTypeResolver.resolveParameterType(methodParam, handler.getClass());</span><br><span class="line">String paramName = <span class="hljs-keyword">null</span>;</span><br><span class="line">String headerName = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">boolean</span> requestBodyFound = <span class="hljs-keyword">false</span>;</span><br><span class="line">String cookieName = <span class="hljs-keyword">null</span>;</span><br><span class="line">String pathVarName = <span class="hljs-keyword">null</span>;</span><br><span class="line">String attrName = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">boolean</span> required = <span class="hljs-keyword">false</span>;</span><br><span class="line">String defaultValue = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">boolean</span> validate = <span class="hljs-keyword">false</span>;</span><br><span class="line">Object[] validationHints = <span class="hljs-keyword">null</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> annotationsFound = <span class="hljs-number">0</span>;</span><br><span class="line">Annotation[] paramAnns = methodParam.getParameterAnnotations();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (Annotation paramAnn : paramAnns) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (RequestParam.class.isInstance(paramAnn)) &#123;</span><br><span class="line">RequestParam requestParam = (RequestParam) paramAnn;</span><br><span class="line">paramName = requestParam.value();</span><br><span class="line">required = requestParam.required();</span><br><span class="line">defaultValue = parseDefaultValueAttribute(requestParam.defaultValue());</span><br><span class="line">annotationsFound++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (RequestHeader.class.isInstance(paramAnn)) &#123;</span><br><span class="line">RequestHeader requestHeader = (RequestHeader) paramAnn;</span><br><span class="line">headerName = requestHeader.value();</span><br><span class="line">required = requestHeader.required();</span><br><span class="line">defaultValue = parseDefaultValueAttribute(requestHeader.defaultValue());</span><br><span class="line">annotationsFound++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (RequestBody.class.isInstance(paramAnn)) &#123;</span><br><span class="line">requestBodyFound = <span class="hljs-keyword">true</span>;</span><br><span class="line">annotationsFound++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (CookieValue.class.isInstance(paramAnn)) &#123;</span><br><span class="line">CookieValue cookieValue = (CookieValue) paramAnn;</span><br><span class="line">cookieName = cookieValue.value();</span><br><span class="line">required = cookieValue.required();</span><br><span class="line">defaultValue = parseDefaultValueAttribute(cookieValue.defaultValue());</span><br><span class="line">annotationsFound++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (PathVariable.class.isInstance(paramAnn)) &#123;</span><br><span class="line">PathVariable pathVar = (PathVariable) paramAnn;</span><br><span class="line">pathVarName = pathVar.value();</span><br><span class="line">annotationsFound++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ModelAttribute.class.isInstance(paramAnn)) &#123;</span><br><span class="line">ModelAttribute attr = (ModelAttribute) paramAnn;</span><br><span class="line">attrName = attr.value();</span><br><span class="line">annotationsFound++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Value.class.isInstance(paramAnn)) &#123;</span><br><span class="line">defaultValue = ((Value) paramAnn).value();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (paramAnn.annotationType().getSimpleName().startsWith(<span class="hljs-string">"Valid"</span>)) &#123;</span><br><span class="line">validate = <span class="hljs-keyword">true</span>;</span><br><span class="line">Object value = AnnotationUtils.getValue(paramAnn);</span><br><span class="line">validationHints = (value <span class="hljs-keyword">instanceof</span> Object[] ? (Object[]) value : <span class="hljs-keyword">new</span> Object[] &#123;value&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (annotationsFound &gt; <span class="hljs-number">1</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"Handler parameter annotations are exclusive choices - "</span> +</span><br><span class="line"><span class="hljs-string">"do not specify more than one such annotation on the same parameter: "</span> + handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (annotationsFound == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">Object argValue = resolveCommonArgument(methodParam, webRequest);</span><br><span class="line"><span class="hljs-keyword">if</span> (argValue != WebArgumentResolver.UNRESOLVED) &#123;</span><br><span class="line">args[i] = argValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (defaultValue != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">args[i] = resolveDefaultValue(defaultValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">Class&lt;?&gt; paramType = methodParam.getParameterType();</span><br><span class="line"><span class="hljs-keyword">if</span> (Model.class.isAssignableFrom(paramType) || Map.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (!paramType.isAssignableFrom(implicitModel.getClass())) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"Argument ["</span> + paramType.getSimpleName() + <span class="hljs-string">"] is of type "</span> +</span><br><span class="line"><span class="hljs-string">"Model or Map but is not assignable from the actual model. You may need to switch "</span> +</span><br><span class="line"><span class="hljs-string">"newer MVC infrastructure classes to use this argument."</span>);</span><br><span class="line">&#125;</span><br><span class="line">args[i] = implicitModel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (SessionStatus.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">args[i] = <span class="hljs-keyword">this</span>.sessionStatus;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (HttpEntity.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line">args[i] = resolveHttpEntityRequest(methodParam, webRequest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Errors.class.isAssignableFrom(paramType)) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"Errors/BindingResult argument declared "</span> +</span><br><span class="line"><span class="hljs-string">"without preceding model attribute. Check your handler method signature!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (BeanUtils.isSimpleProperty(paramType)) &#123;</span><br><span class="line">paramName = <span class="hljs-string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">attrName = <span class="hljs-string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (paramName != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (headerName != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (requestBodyFound) &#123;</span><br><span class="line">args[i] = resolveRequestBody(methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cookieName != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pathVarName != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">args[i] = resolvePathVariable(pathVarName, methodParam, webRequest, handler);</span><br><span class="line">&#125;</span><br><span class="line">            <span class="hljs-comment">//确定自定义类型参数的值，还要讲七扭去中的每一个参数赋值给这个对象</span></span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (attrName != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">WebDataBinder binder =</span><br><span class="line">resolveModelAttribute(attrName, methodParam, implicitModel, webRequest, handler);</span><br><span class="line"><span class="hljs-keyword">boolean</span> assignBindingResult = (args.length &gt; i + <span class="hljs-number">1</span> &amp;&amp; Errors.class.isAssignableFrom(paramTypes[i + <span class="hljs-number">1</span>]));</span><br><span class="line"><span class="hljs-keyword">if</span> (binder.getTarget() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">doBind(binder, webRequest, validate, validationHints, !assignBindingResult);</span><br><span class="line">&#125;</span><br><span class="line">args[i] = binder.getTarget();</span><br><span class="line"><span class="hljs-keyword">if</span> (assignBindingResult) &#123;</span><br><span class="line">args[i + <span class="hljs-number">1</span>] = binder.getBindingResult();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">implicitModel.putAll(binder.getBindingResult().getModel());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有标注解   </p><ol><li><p>先看是否为普通参数（是否为原生API）</p><p>再看是否Model或者Map，如果是传入隐含模型</p></li><li><p>自定义类型的参数没有注解没有ModelAttribute注解</p><ol><li>先看原生API</li><li>在看是否是Map或ModelMap</li><li>在看看是不是其他类型，比如SessionStatus、HttpEntity、Errors</li><li>是否为简单属性，是否Integer、String基本类型<ol><li>如果paramName=“”</li></ol></li><li>AttrName=””</li></ol></li></ol><p>如果是自定义类型对象，最终会产生两个效果</p><ol><li>如果这个参数标注了ModelAttribute注解就给attrName赋值，为这个注解Value值</li><li>如果没有，就为“”</li></ol></blockquote></li><li><p>确定自定义类型的值（POJO)</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doBind</span><span class="hljs-params">(WebDataBinder binder, NativeWebRequest webRequest, <span class="hljs-keyword">boolean</span> validate,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">Object[] validationHints, <span class="hljs-keyword">boolean</span> failOnErrors)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">doBind(binder, webRequest);</span><br><span class="line"><span class="hljs-keyword">if</span> (validate) &#123;</span><br><span class="line">binder.validate(validationHints);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (failOnErrors &amp;&amp; binder.getBindingResult().hasErrors()) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BindException(binder.getBindingResult());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> WebDataBinder <span class="hljs-title">resolveModelAttribute</span><span class="hljs-params">(String attrName, MethodParameter methodParam,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">ExtendedModelMap implicitModel, NativeWebRequest webRequest, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Bind request parameter onto object...</span></span><br><span class="line">String name = attrName;</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-string">""</span>.equals(name)) &#123;</span><br><span class="line">name = Conventions.getVariableNameForParameter(methodParam);</span><br><span class="line">&#125;</span><br><span class="line">Class&lt;?&gt; paramType = methodParam.getParameterType();</span><br><span class="line">    <span class="hljs-comment">//如果隐含模型有这个key（标了ModelAttribute注解就是注解标定的值，没标就是参数类型首字母小写）指定的值</span></span><br><span class="line">Object bindObject;</span><br><span class="line"><span class="hljs-keyword">if</span> (implicitModel.containsKey(name)) &#123;</span><br><span class="line">bindObject = implicitModel.get(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.methodResolver.isSessionAttribute(name, paramType)) &#123;</span><br><span class="line">bindObject = <span class="hljs-keyword">this</span>.sessionAttributeStore.retrieveAttribute(webRequest, name);</span><br><span class="line"><span class="hljs-keyword">if</span> (bindObject == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">raiseSessionRequiredException(<span class="hljs-string">"Session attribute '"</span> + name + <span class="hljs-string">"' required - not found in session"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">bindObject = BeanUtils.instantiateClass(paramType);</span><br><span class="line">&#125;</span><br><span class="line">WebDataBinder binder = createBinder(webRequest, bindObject, name);</span><br><span class="line">initBinder(handler, name, binder, webRequest);</span><br><span class="line"><span class="hljs-keyword">return</span> binder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>如果隐含模型有这个key（标了ModelAttribute注解就是注解标定的值，没标就是参数类型首字母小写）指定的值</p><p>如果有将这个值赋值给bindObject</p></li><li><p>如果是SessionAttributes标注的属性，就从Session中拿</p></li><li><p>如果都不是，就用反射创建一个</p></li></ol></li></ol><hr><ol><li><p>确定方法每个参数的值</p><ol><li><p>标注解：保存注解信息；最终得到这个注解应该对应解析的值</p></li><li><p>没标注解</p><ol><li><p>先看是否是否为原生API</p></li><li><p>是否为Model或Map</p></li><li><p>看是否为简单类型</p></li><li><p>给attrName赋值，参数标了ModelAttribute就是指定的，没标就位空串</p><p>确定自定义类型参数</p><ol><li><p>attrName使用参数类型首字母小写；或者使用之前@ModelAttribute的值</p></li><li><p>先看隐含模型中是否有这个attrName对应的值；如果有就从隐含模型中获取并赋值</p></li><li><p>看是否SessionAttrinute标注的属性，如果是从Session中拿</p><p>拿不到抛异常</p></li><li><p>不是SessionAttributes标注的值，利用反射创建一个</p></li></ol></li><li><p>拿到之前创建好的对象，使用数据绑定器（WebDataBinder）将请求的么个数据绑定到这个对象中</p></li></ol></li></ol></li></ol><hr><h2><span id="springmvc-jiu-da-zu-jian">SpringMVC九大组件</span><a href="#springmvc-jiu-da-zu-jian" class="header-anchor">$</a></h2><blockquote><p>在DispatchServlet中有几个引用类型属性。关键位置都是由这些组件完成的</p><p><strong>共同点：</strong> 九大组件都是接口：接口就是规范，提供了强大的扩展性</p></blockquote><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/** MultipartResolver used by this servlet */</span></span><br><span class="line"><span class="hljs-comment">//文件上传解析器</span></span><br><span class="line"><span class="hljs-keyword">private</span> MultipartResolver multipartResolver;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/** LocaleResolver used by this servlet */</span></span><br><span class="line"><span class="hljs-comment">//区域信息析器与国际化有关</span></span><br><span class="line"><span class="hljs-keyword">private</span> LocaleResolver localeResolver;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/** ThemeResolver used by this servlet */</span></span><br><span class="line"><span class="hljs-comment">//主题解析器：主题效果更换</span></span><br><span class="line"><span class="hljs-keyword">private</span> ThemeResolver themeResolver;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/** List of HandlerMappings used by this servlet */</span></span><br><span class="line"><span class="hljs-comment">//Handler映射信息：HandlerMapping</span></span><br><span class="line"><span class="hljs-keyword">private</span> List&lt;HandlerMapping&gt; handlerMappings;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/** List of HandlerAdapters used by this servlet */</span></span><br><span class="line"><span class="hljs-comment">//Handler适配器</span></span><br><span class="line"><span class="hljs-keyword">private</span> List&lt;HandlerAdapter&gt; handlerAdapters;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/** List of HandlerExceptionResolvers used by this servlet */</span></span><br><span class="line"><span class="hljs-comment">//SpringMVC强大的异常解析功能</span></span><br><span class="line"><span class="hljs-keyword">private</span> List&lt;HandlerExceptionResolver&gt; handlerExceptionResolvers;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/** RequestToViewNameTranslator used by this servlet */</span></span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-keyword">private</span> RequestToViewNameTranslator viewNameTranslator;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/** FlashMapManager used by this servlet */</span></span><br><span class="line"><span class="hljs-comment">//SpringMVC中运行重定向携带数据的功能</span></span><br><span class="line"><span class="hljs-keyword">private</span> FlashMapManager flashMapManager;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/** List of ViewResolvers used by this servlet */</span></span><br><span class="line"><span class="hljs-comment">//视图解析器</span></span><br><span class="line"><span class="hljs-keyword">private</span> List&lt;ViewResolver&gt; viewResolvers;</span><br></pre></td></tr></table></figure><p><strong>DispatchServlet中onRefresh方法</strong></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onRefresh</span><span class="hljs-params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">initStrategies(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initStrategies</span><span class="hljs-params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">initMultipartResolver(context);</span><br><span class="line">initLocaleResolver(context);</span><br><span class="line">initThemeResolver(context);</span><br><span class="line">initHandlerMappings(context);</span><br><span class="line">initHandlerAdapters(context);</span><br><span class="line">initHandlerExceptionResolvers(context);</span><br><span class="line">initRequestToViewNameTranslator(context);</span><br><span class="line">initViewResolvers(context);</span><br><span class="line">initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;tocStart&quot;&gt;&lt;/div&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#spring-mvc-zhong-dispatchservlet-yun-xing-liu-cheng&quot;&gt;Spring MVC中DispatchServlet运行流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#springmvc-jiu-da-zu-jian&quot;&gt;SpringMVC九大组件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;div class=&quot;tocEnd&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;Spring-MVC中DispatchServlet运行流程&quot;&gt;&lt;a href=&quot;#Spring-MVC中DispatchServlet运行流程&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC中DispatchServlet运行流程&quot;&gt;&lt;/a&gt;Spring MVC中DispatchServlet运行流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com//lyhcc/Images/raw/master/img/20200219190425.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring MVC" scheme="https://lyhcc.github.io/categories/Spring-MVC/"/>
    
    
      <category term="SpringMVC源码分析" scheme="https://lyhcc.github.io/tags/SpringMVC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC 请求数据传入</title>
    <link href="https://lyhcc.github.io/post/4c7891d3.html"/>
    <id>https://lyhcc.github.io/post/4c7891d3.html</id>
    <published>2020-02-19T04:29:43.643Z</published>
    <updated>2020-02-19T06:15:00.989Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#qing-qiu-chu-li-fang-fa-qian-ming">请求处理方法签名</a></li><li><a href="#requestparam-zhu-jie">@RequestParam注解</a></li><li><a href="#shi-yan-dai-ma">实验代码</a></li><li><a href="#requestheader-zhu-jie">@RequestHeader注解</a></li><li><a href="#shi-yan-dai-ma-1">实验代码</a></li><li><a href="#cookievalue-zhu-jie">@CookieValue注解</a></li><li><a href="#shi-yong-pojo-zuo-wei-can-shu">使用POJO作为参数</a></li><li><a href="#shi-yong-servlet-yuan-sheng-api-zuo-wei-can-shu">使用Servlet原生API作为参数</a></li><li><a href="#shi-yan-dai-ma-2">实验代码</a></li></ul><!-- tocstop --></div><h2><span id="qing-qiu-chu-li-fang-fa-qian-ming">请求处理方法签名</span><a href="#qing-qiu-chu-li-fang-fa-qian-ming" class="header-anchor">$</a></h2><ul><li>Spring MVC 对控制器处理方法签名的限制是很宽松的，几乎可以按喜欢的任何方式对方法进行签名。 </li><li>必要时可以对方法及方法入参标注相应的注解（ @PathVariable 、@RequestParam、@RequestHeader 等）、</li><li>Spring MVC 框架会将 HTTP 请求的信息绑定到相应的方法入参中，并根据方法的返回值类型做出相应的后续处理。</li></ul><a id="more"></a><h2><span id="requestparam-zhu-jie">@RequestParam注解</span><a href="#requestparam-zhu-jie" class="header-anchor">$</a></h2><ul><li>在处理方法入参处使用 @RequestParam 可以把请求参数传递给请求方法</li><li>value：参数名</li><li>required：是否必须。默认为 true, 表示请求参数中必须包含对应的参数，若不存在，将抛出异常</li><li>defaultValue: 默认值，当没有传递参数时使用该值</li></ul><h2><span id="shi-yan-dai-ma">实验代码</span><a href="#shi-yan-dai-ma" class="header-anchor">$</a></h2><ol><li>增加控制方法<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"testRequestParam"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testRequestParam</span><span class="hljs-params">(@RequestParam(value=<span class="hljs-string">"username"</span>)</span>String username, @<span class="hljs-title">RequestParam</span><span class="hljs-params">(value=<span class="hljs-string">"age"</span>)</span>Integer age) </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"testRequestParam---username:"</span>+username+<span class="hljs-string">",age:"</span>+age);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>页面链接代码<figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="testRequestParam?username=atguigu&amp;age=10"&gt;testRequestParam&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ol><h2><span id="requestheader-zhu-jie">@RequestHeader注解</span><a href="#requestheader-zhu-jie" class="header-anchor">$</a></h2><ul><li>使用 @RequestHeader 绑定请求报头的属性值</li><li>请求头包含了若干个属性，服务器可据此获知客户端的信息，通过 @RequestHeader 即可将请求头中的属性值绑定到处理方法的入参中 </li><li>也有三个参数value、defaultValue、required</li></ul><h2><span id="shi-yan-dai-ma">实验代码</span><a href="#shi-yan-dai-ma" class="header-anchor">$</a></h2><ol><li>控制器代码<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"testRequestHeader"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testRequestHeader</span><span class="hljs-params">(@RequestHeader(value=<span class="hljs-string">"User-Agent"</span>)</span>String aa) </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"testRequestHeader---UserAgent"</span> + aa);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>页面链接<figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"testRequestHeader"</span>&gt;</span>testRequestHeader<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2><span id="cookievalue-zhu-jie">@CookieValue注解</span><a href="#cookievalue-zhu-jie" class="header-anchor">$</a></h2><ul><li>使用 @CookieValue 绑定请求中的 Cookie 值</li><li>@CookieValue 可让处理方法入参绑定某个 Cookie 值</li></ul><ol><li>控制器代理<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"testCookieMethod"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">testCookieMethod</span><span class="hljs-params">(@CookieValue(value=<span class="hljs-string">"JSESSIONID"</span>)</span>String sessionID) </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"Cookie:JSESSIONID="</span>+sessionID);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>页面链接<figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"testCookieMethod"</span>&gt;</span>testCookieMethod<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2><span id="shi-yong-pojo-zuo-wei-can-shu">使用POJO作为参数</span><a href="#shi-yong-pojo-zuo-wei-can-shu" class="header-anchor">$</a></h2><ul><li>使用 POJO 对象绑定请求参数值</li><li>Spring MVC 会按请求参数名和 POJO 属性名进行自动匹配，自动为该对象填充属性值。支持级联属性。如：dept.deptId、dept.address.tel 等</li></ul><ol><li><p>控制器方法</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"testPOJO"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testPOJO</span><span class="hljs-params">(Person person)</span> </span>&#123;</span><br><span class="line">System.out.println(person);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>表单页面代码</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">" testPOJO"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"POST"</span>&gt;</span></span><br><span class="line">username: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="line">password: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pwd"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="line">email: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"email"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="line">gender: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"gender"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Submit"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>增加实体类</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">private</span> String name;</span><br><span class="line"><span class="hljs-keyword">private</span> String pwd;</span><br><span class="line"><span class="hljs-keyword">private</span> String gender;</span><br><span class="line"><span class="hljs-keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><p><strong>使用POJO出现乱码如何解决？</strong>  </p><ul><li>如果中文有乱码，需要配置字符编码过滤器，且配置其他过滤器之前，<br>如（HiddenHttpMethodFilter），否则不起作用。（思考method=”get”请求的乱码问题怎么解决的）<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请求乱码：</span><br><span class="line">   GET请求： 改server.xml，在8080端口处URIEncoding=”UTF-8”</span><br><span class="line">   POST请求： 在第一次请求参数之前设置</span><br><span class="line">               Request.setCharacterEncoding(“UTF-8”)</span><br><span class="line">               自定义Filter, SpringMVC</span><br><span class="line">封装有org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">响应乱码：</span><br><span class="line">   Response.setContentType(“text/html;charset=utf-8”)</span><br></pre></td></tr></table></figure></li></ul><p><strong>过滤器配置</strong>  </p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2><span id="shi-yong-servlet-yuan-sheng-api-zuo-wei-can-shu">使用Servlet原生API作为参数</span><a href="#shi-yong-servlet-yuan-sheng-api-zuo-wei-can-shu" class="header-anchor">$</a></h2><ul><li><p>MVC 的 Handler 方法可以接受哪些 ServletAPI 类型的参数<br>  1) HttpServletRequest<br>  2) HttpServletResponse<br>  3) HttpSession<br>  4) java.security.Principal<br>  5) Locale<br>  6) InputStream<br>  7) OutputStream<br>  8) Reader<br>  9) Writer</p></li><li><p>源码参考：AnnotationMethodHandlerAdapter L866<br>  <img src="https://gitee.com//lyhcc/Images/raw/master/img/20200219135356.png" alt></p>  <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">      <span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">resolveStandardArgument</span><span class="hljs-params">(Class&lt;?&gt; parameterType, NativeWebRequest webRequest)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (ServletRequest.class.isAssignableFrom(parameterType) ||</span><br><span class="line">MultipartRequest.class.isAssignableFrom(parameterType)) &#123;</span><br><span class="line">Object nativeRequest = webRequest.getNativeRequest(parameterType);</span><br><span class="line"><span class="hljs-keyword">if</span> (nativeRequest == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="hljs-string">"Current request is not of type ["</span> + parameterType.getName() + <span class="hljs-string">"]: "</span> + request);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> nativeRequest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ServletResponse.class.isAssignableFrom(parameterType)) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.responseArgumentUsed = <span class="hljs-keyword">true</span>;</span><br><span class="line">Object nativeResponse = webRequest.getNativeResponse(parameterType);</span><br><span class="line"><span class="hljs-keyword">if</span> (nativeResponse == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="hljs-string">"Current response is not of type ["</span> + parameterType.getName() + <span class="hljs-string">"]: "</span> + response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> nativeResponse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (HttpSession.class.isAssignableFrom(parameterType)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> request.getSession();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Principal.class.isAssignableFrom(parameterType)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> request.getUserPrincipal();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Locale.class.equals(parameterType)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> RequestContextUtils.getLocale(request);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (InputStream.class.isAssignableFrom(parameterType)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> request.getInputStream();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Reader.class.isAssignableFrom(parameterType)) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> request.getReader();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (OutputStream.class.isAssignableFrom(parameterType)) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.responseArgumentUsed = <span class="hljs-keyword">true</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> response.getOutputStream();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Writer.class.isAssignableFrom(parameterType)) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.responseArgumentUsed = <span class="hljs-keyword">true</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> response.getWriter();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.resolveStandardArgument(parameterType, webRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2><span id="shi-yan-dai-ma">实验代码</span><a href="#shi-yan-dai-ma" class="header-anchor">$</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;tocStart&quot;&gt;&lt;/div&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#qing-qiu-chu-li-fang-fa-qian-ming&quot;&gt;请求处理方法签名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#requestparam-zhu-jie&quot;&gt;@RequestParam注解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shi-yan-dai-ma&quot;&gt;实验代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#requestheader-zhu-jie&quot;&gt;@RequestHeader注解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shi-yan-dai-ma-1&quot;&gt;实验代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cookievalue-zhu-jie&quot;&gt;@CookieValue注解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shi-yong-pojo-zuo-wei-can-shu&quot;&gt;使用POJO作为参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shi-yong-servlet-yuan-sheng-api-zuo-wei-can-shu&quot;&gt;使用Servlet原生API作为参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shi-yan-dai-ma-2&quot;&gt;实验代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;div class=&quot;tocEnd&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;请求处理方法签名&quot;&gt;&lt;a href=&quot;#请求处理方法签名&quot; class=&quot;headerlink&quot; title=&quot;请求处理方法签名&quot;&gt;&lt;/a&gt;请求处理方法签名&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Spring MVC 对控制器处理方法签名的限制是很宽松的，几乎可以按喜欢的任何方式对方法进行签名。 &lt;/li&gt;
&lt;li&gt;必要时可以对方法及方法入参标注相应的注解（ @PathVariable 、@RequestParam、@RequestHeader 等）、&lt;/li&gt;
&lt;li&gt;Spring MVC 框架会将 HTTP 请求的信息绑定到相应的方法入参中，并根据方法的返回值类型做出相应的后续处理。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring MVC" scheme="https://lyhcc.github.io/categories/Spring-MVC/"/>
    
    
      <category term="SpringMVC 请求数据传入" scheme="https://lyhcc.github.io/tags/SpringMVC-%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E4%BC%A0%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC之响应数据传出</title>
    <link href="https://lyhcc.github.io/post/f51ba3e7.html"/>
    <id>https://lyhcc.github.io/post/f51ba3e7.html</id>
    <published>2020-02-18T12:09:07.754Z</published>
    <updated>2020-02-20T11:27:37.196Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#spring-mvc-shu-chu-mo-xing-shu-ju-gai-shu">Spring MVC输出模型数据概述</a></li><li><a href="#chu-li-mo-xing-shu-ju-zhi-modelandview">处理模型数据之 ModelAndView</a></li><li><a href="#shi-yan-dai-ma">实验代码</a></li><li><a href="#chu-li-shu-ju-zhi-map">处理数据之Map</a></li><li><a href="#chu-li-mo-xing-shu-ju-zhi-sessionattributes-tui-jian-bu-yong">处理模型数据之@SessionAttributes（推荐不用）</a><ul><li><a href="#sessionattributes-yuan-ma">SessionAttributes源码</a></li><li><a href="#shi-yan-dai-ma-1">实验代码</a></li></ul></li></ul><!-- tocstop --></div><p>Spring MVC除了在原生的request和session外还能怎么样把数据带给页面</p><p>1) 可以在方法处传入Map，或者Model或者ModelMap。给这些参数里面保存的所有数据都会放在所有的数据都会放在请求域中。可以在页面中获取</p><blockquote><p>在PageContext、Request、Session、Application<br>Map(interface(jdk))  ModelMap(class)<br>Model(interface(spring))<br>2) 方法的返回值可以变为ModeAndView类型<br>既包含视图信息（页面地址）也包含模型数据（给页面带的数据）<br>而且数据是放在请求域中<br>request、session、application<br>3) Spring MVC提供了一种可以临时给Session域中保存数据的方式<br>使用一个注解 @SessionAttributes(只能标注在类上)<br>给BindingAwareModelMap中保存的数据，同时给session中放一份</p></blockquote><a id="more"></a><h2><span id="spring-mvc-shu-chu-mo-xing-shu-ju-gai-shu">Spring MVC输出模型数据概述</span><a href="#spring-mvc-shu-chu-mo-xing-shu-ju-gai-shu" class="header-anchor">$</a></h2><blockquote><p>提供了以下几种途径输出模型数据：</p></blockquote><ul><li>ModelAndView: 处理方法返回值类型为 ModelAndView 时, 方法体即可通过该对象添加模型数据 </li><li>Map 及 Model: 入参为 org.springframework.ui.Model、<br>org.springframework.ui.ModelMap 或 java.uti.Map 时，处理方法返回时，Map 中的数据会自动添加到模型中。</li><li>@SessionAttributes: 将模型中的某个属性暂存到 HttpSession 中，以便多个请求之间可以共享这个属性</li><li>@ModelAttribute: 方法入参标注该注解后, 入参的对象就会放到数据模型中</li></ul><h2><span id="chu-li-mo-xing-shu-ju-zhi-modelandview">处理模型数据之 ModelAndView</span><a href="#chu-li-mo-xing-shu-ju-zhi-modelandview" class="header-anchor">$</a></h2><ol><li>控制器处理方法的返回值如果为 ModelAndView, 则其既包含视图信息，也包含模型数据信息。</li><li>添加模型数据:<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MoelAndView addObject(String attributeName, Object attributeValue)</span><br><span class="line">ModelAndView addAllObject(Map&lt;String, ?&gt; modelMap)</span><br></pre></td></tr></table></figure></li><li>设置视图:<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void setView(View view)</span><br><span class="line">void setViewName(String viewName)</span><br></pre></td></tr></table></figure></li></ol><h2><span id="shi-yan-dai-ma">实验代码</span><a href="#shi-yan-dai-ma" class="header-anchor">$</a></h2><ol><li>控制器方法<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"testModelAndView"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">testModelAndView</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView(<span class="hljs-string">"success"</span>);</span><br><span class="line">modelAndView.addObject(<span class="hljs-string">"time"</span>, <span class="hljs-keyword">new</span> Date().toString());<span class="hljs-comment">//放到requestScope中</span></span><br><span class="line"><span class="hljs-keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>页面链接<figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="testModelAndView"&gt;testModelAndView&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li>成功页面，显示数据<figure class="highlight jsp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time:$&#123;requestScope.time &#125;</span><br></pre></td></tr></table></figure></li></ol><h2><span id="chu-li-shu-ju-zhi-map">处理数据之Map</span><a href="#chu-li-shu-ju-zhi-map" class="header-anchor">$</a></h2><ul><li>Spring MVC 在内部使用了一个 org.springframework.ui.Model 接口存储模型数据<blockquote><p>具体使用步骤</p></blockquote>  1) Spring MVC 在调用方法前会创建一个隐含的模型对象作为模型数据的存储容器。<br>  2) 如果方法的入参为 Map 或 Model 类型，Spring MVC 会将隐含模型的引用传递给这些入参。<br>  3) 在方法体内，开发者可以通过这个入参对象访问到模型中的所有数据，也可以向模型中添加新的属性数据<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200219145727.png" alt><br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200219145746.png" alt></li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"testMap"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testMap</span><span class="hljs-params">(Map&lt;String, Object&gt;map)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"testMap-&gt;"</span>+map.getClass());</span><br><span class="line">map.put(<span class="hljs-string">"map"</span>, <span class="hljs-string">"map"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"testMap"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"testModel"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testModel</span><span class="hljs-params">(Model model)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"testModel-&gt;"</span>+model.getClass());</span><br><span class="line">model.addAttribute(<span class="hljs-string">"model"</span>, <span class="hljs-string">"model"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"testmodel"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"testModelMap"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testModelMap</span><span class="hljs-params">(ModelMap map)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"testModelMap-&gt;"</span>+map.getClass());</span><br><span class="line">map.put(<span class="hljs-string">"modelmap"</span>, <span class="hljs-string">"modelmap"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"testmodelMap"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>界面显示相应的数据获取以及访问链接</strong>  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8200/SpringMVC_Output/testModel</span><br><span class="line">http://localhost:8200/SpringMVC_Output/testMap</span><br><span class="line">http://localhost:8200/SpringMVC_Output/testModelMap</span><br><span class="line">map: $&#123;requestScode.map &#125;</span><br><span class="line">model: $&#123;requestScode.model &#125;</span><br><span class="line">ModelMap: $&#123;requestScope.modelmap &#125;</span><br></pre></td></tr></table></figure><h2><span id="chu-li-mo-xing-shu-ju-zhi-sessionattributes-tui-jian-bu-yong">处理模型数据之@SessionAttributes（推荐不用）</span><a href="#chu-li-mo-xing-shu-ju-zhi-sessionattributes-tui-jian-bu-yong" class="header-anchor">$</a></h2><ul><li>若希望在多个请求之间共用某个模型属性数据，则可以在控制器类上标注一个 @SessionAttributes, Spring MVC 将在模型中对应的属性暂存到 HttpSession 中。</li><li>@SessionAttributes 除了可以通过属性名指定需要放到会话中的属性外，还可以通过模型属性的对象类型指定哪些模型属性需要放到会话中<blockquote><p>例如：  </p></blockquote><ol><li>@SessionAttributes(types=User.class) 会将隐含模型中所有类型为 User.class 的属性添加到会话中。</li><li>@SessionAttributes(value={“user1”, “user2”})</li><li>@SessionAttributes(types={User.class, Dept.class})</li><li>@SessionAttributes(value={“user1”, “user2”}, types={Dept.class}) <h3><span id="sessionattributes-yuan-ma">SessionAttributes源码</span><a href="#sessionattributes-yuan-ma" class="header-anchor">$</a></h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> org.springframework.web.bind.annotation;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="hljs-keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="hljs-keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="hljs-keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-meta">@Target</span>(&#123;ElementType.TYPE&#125;) <span class="hljs-comment">//说明这个注解只能应用在类型上面</span></span><br><span class="line"><span class="hljs-meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="hljs-meta">@Inherited</span></span><br><span class="line"><span class="hljs-meta">@Documented</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SessionAttributes &#123; </span><br><span class="line">String[] value() <span class="hljs-keyword">default</span> &#123;&#125;;   <span class="hljs-comment">//推荐使用 </span></span><br><span class="line">Class&lt;?&gt;[] types() <span class="hljs-keyword">default</span> &#123;&#125;;  <span class="hljs-comment">//范围太广 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3><span id="shi-yan-dai-ma">实验代码</span><a href="#shi-yan-dai-ma" class="header-anchor">$</a></h3><ol><li>类上添加注解<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Controller</span></span><br><span class="line"><span class="hljs-meta">@SessionAttributes</span>(value = &#123;<span class="hljs-string">"modelmap"</span>&#125;,types= &#123;String.class&#125;)</span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@SessionAttributes</span></span></span><br><span class="line"><span class="hljs-comment"> *  除了可以通过属性名指定需要放到会话中的属性外(实际上是通过value指定key值)，</span></span><br><span class="line"><span class="hljs-comment"> *  还可以通过模型属性的对象类型指定哪些模型属性需要放到会话中(实际上是通过types指定类型)</span></span><br><span class="line"><span class="hljs-comment"> * 注意：只能放在类的上面，不能修饰方法</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputController</span> </span>&#123;</span><br></pre></td></tr></table></figure></li></ol><hr><p><strong>注意：</strong>  </p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">④异常</span><br><span class="line">//org.springframework.web.HttpSessionRequiredException: Session attribute &apos;user&apos; required - not found in session</span><br><span class="line">//出现这个异常，是@SessionAttributes(value=&#123;&quot;user&quot;&#125;,types=&#123;String.class&#125;)导致的，去掉类上的这个注解</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;tocStart&quot;&gt;&lt;/div&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#spring-mvc-shu-chu-mo-xing-shu-ju-gai-shu&quot;&gt;Spring MVC输出模型数据概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#chu-li-mo-xing-shu-ju-zhi-modelandview&quot;&gt;处理模型数据之 ModelAndView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shi-yan-dai-ma&quot;&gt;实验代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#chu-li-shu-ju-zhi-map&quot;&gt;处理数据之Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#chu-li-mo-xing-shu-ju-zhi-sessionattributes-tui-jian-bu-yong&quot;&gt;处理模型数据之@SessionAttributes（推荐不用）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sessionattributes-yuan-ma&quot;&gt;SessionAttributes源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shi-yan-dai-ma-1&quot;&gt;实验代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;div class=&quot;tocEnd&quot;&gt;&lt;/div&gt;




&lt;p&gt;Spring MVC除了在原生的request和session外还能怎么样把数据带给页面&lt;/p&gt;
&lt;p&gt;1) 可以在方法处传入Map，或者Model或者ModelMap。给这些参数里面保存的所有数据都会放在所有的数据都会放在请求域中。可以在页面中获取&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在PageContext、Request、Session、Application&lt;br&gt;Map(interface(jdk))  ModelMap(class)&lt;br&gt;Model(interface(spring))&lt;br&gt;2) 方法的返回值可以变为ModeAndView类型&lt;br&gt;既包含视图信息（页面地址）也包含模型数据（给页面带的数据）&lt;br&gt;而且数据是放在请求域中&lt;br&gt;request、session、application&lt;br&gt;3) Spring MVC提供了一种可以临时给Session域中保存数据的方式&lt;br&gt;使用一个注解 @SessionAttributes(只能标注在类上)&lt;br&gt;给BindingAwareModelMap中保存的数据，同时给session中放一份&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Spring MVC" scheme="https://lyhcc.github.io/categories/Spring-MVC/"/>
    
    
      <category term="SpringMVC之响应数据传出" scheme="https://lyhcc.github.io/tags/SpringMVC%E4%B9%8B%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E4%BC%A0%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>HiddenHttpMethodFilter (REST)</title>
    <link href="https://lyhcc.github.io/post/fdd838d6.html"/>
    <id>https://lyhcc.github.io/post/fdd838d6.html</id>
    <published>2020-02-16T08:38:51.893Z</published>
    <updated>2020-02-19T06:15:38.439Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#gai-shu">概述</a></li><li><a href="#can-kao-zi-liao">参考资料</a></li><li><a href="#shi-me-shi-rest-feng-ge">什么是REST风格</a></li><li><a href="#shi-yan-dai-ma">实验代码</a></li><li><a href="#yuan-ma-fen-xi">源码分析</a></li></ul><!-- tocstop --></div><h2><span id="gai-shu">概述</span><a href="#gai-shu" class="header-anchor">$</a></h2><blockquote><p>REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。<br>它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。<br>目前在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。<br>例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。</p></blockquote><a id="more"></a><h2><span id="can-kao-zi-liao">参考资料</span><a href="#can-kao-zi-liao" class="header-anchor">$</a></h2><ol><li><a href="http://kb.cnblogs.com/page/186516/" target="_blank" rel="noopener">理解本真的REST架构风格</a></li><li><a href="http://www.infoq.com/cn/articles/rest-introduction" target="_blank" rel="noopener">深入浅出REST</a></li></ol><h2><span id="shi-me-shi-rest-feng-ge">什么是REST风格</span><a href="#shi-me-shi-rest-feng-ge" class="header-anchor">$</a></h2><ol><li><p>REST：即 Representational State Transfer。（<strong>资源）表现层状态转化</strong> 。是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用</p><ul><li><strong>资源（Resources）</strong>：网络上的一个实体，或者说是网络上的一个具体信息。<br>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。<br>可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的 URI 。<br>获取这个资源，访问它的URI就可以，因此 URI 即为每一个资源的独一无二的识别符。</li><li><strong>表现层（Representation）</strong>：把资源具体呈现出来的形式，叫做它的表现层（Representation） 。比如，文本可以用 txt 格式表现，也可以用 HTML 格式、XML 格式、JSON 格式表现，甚至可以采用二进制格式。</li><li><strong>状态转化（State Transfer）</strong> ：每发出一个请求，就代表了客户端和服务器的一次交互过程。HTTP协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“状态转化”（State Transfer）。<br>而这种转化是建立在表现层之上的，所以就是 “表现层状态转化”。</li><li><strong>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</strong></li></ul></li><li><p>URL风格</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/order/1  HTTP GET ：得到 id = 1 的 order   </span><br><span class="line">/order/1  HTTP DELETE：删除 id = 1的 order   </span><br><span class="line">/order/1  HTTP PUT：更新id = 1的 order   </span><br><span class="line">/order     HTTP POST：新增 order</span><br></pre></td></tr></table></figure></li><li><p>HiddenHttpMethodFilter</p><blockquote><p>浏览器 form 表单只支持 GET 与 POST 请求，而DELETE、PUT 等 method 并不支持，Spring3.0 添加了一个过滤器，可以将这些请求转换为标准的 http 方法，使得支持 GET、POST、PUT 与 DELETE 请求。</p></blockquote></li></ol><h2><span id="shi-yan-dai-ma">实验代码</span><a href="#shi-yan-dai-ma" class="header-anchor">$</a></h2><ol><li><p>配置HiddenHttpMethodFilter过滤器</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHTTPMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHTTPMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置前端控制器</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- Map all requests to the DispatcherServlet for handling --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置springmvc-servlet</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"xyz.lyhcc"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>代码</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   <span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/book/&#123;id&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">RESTGet</span><span class="hljs-params">(@PathVariable(value=<span class="hljs-string">"id"</span>)</span>Integer id) </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"GET "</span> + id);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/book"</span>, method=RequestMethod.POST)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">RESTPost</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"Post "</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/book/&#123;id&#125;"</span>, method=RequestMethod.PUT)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">RESTPut</span><span class="hljs-params">(@PathVariable(value=<span class="hljs-string">"id"</span>)</span>Integer id) </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"Put "</span> + id);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/book/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">RESTDelete</span><span class="hljs-params">(@PathVariable(value=<span class="hljs-string">"id"</span>)</span>Integer id) </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"Delete "</span> + id);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>请求链接</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- 实验1 测试 REST风格 GET 请求 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"book/1"</span>&gt;</span>testREST GET<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">&lt;!-- 实验2 测试 REST风格 POST 请求 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"book"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"POST"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"testRESTPost"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">&lt;!-- 实验3 测试 REST风格 PUT 请求 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"book/1"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"POST"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"_method"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"PUT"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"testRESTPut"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">&lt;!-- 实验4 测试 REST风格 DELETE 请求 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"book/1"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"POST"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"_method"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"DELETE"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"testRESTDelete"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="yuan-ma-fen-xi">源码分析</span><a href="#yuan-ma-fen-xi" class="header-anchor">$</a></h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">String paramValue = request.getParameter(<span class="hljs-keyword">this</span>.methodParam);</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-string">"POST"</span>.equals(request.getMethod()) &amp;&amp; StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">String method = paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">HttpServletRequest wrapper = <span class="hljs-keyword">new</span> HttpMethodRequestWrapper(request, method);</span><br><span class="line">filterChain.doFilter(wrapper, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line">filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><p><strong>注意高版本Tomcat会出现一个问题</strong><br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200216204114.png" alt></p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- 在相应的位置添加isError=true --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">pageEncoding</span>=<span class="hljs-string">"UTF-8"</span> <span class="hljs-attr">isErrorPage</span>=<span class="hljs-string">"true"</span>%&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;tocStart&quot;&gt;&lt;/div&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#gai-shu&quot;&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#can-kao-zi-liao&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shi-me-shi-rest-feng-ge&quot;&gt;什么是REST风格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shi-yan-dai-ma&quot;&gt;实验代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#yuan-ma-fen-xi&quot;&gt;源码分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;div class=&quot;tocEnd&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。&lt;br&gt;它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。&lt;br&gt;目前在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。&lt;br&gt;例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Spring MVC" scheme="https://lyhcc.github.io/categories/Spring-MVC/"/>
    
    
      <category term="HiddenHttpMethodFilter (REST)" scheme="https://lyhcc.github.io/tags/HiddenHttpMethodFilter-REST/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC之@RequestMapping</title>
    <link href="https://lyhcc.github.io/post/aa7cd430.html"/>
    <id>https://lyhcc.github.io/post/aa7cd430.html</id>
    <published>2020-02-16T07:38:05.248Z</published>
    <updated>2020-02-19T06:14:43.867Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#requestmapping-ying-she-qing-qiu-zhu-jie">@RequestMapping 映射请求注解</a></li><li><a href="#requestmapping-yuan-ma-can-kao">@RequestMapping源码参考</a></li><li><a href="#requestmapping-shi-yong-dai-ma">@RequestMapping使用代码</a></li><li><a href="#requestmapping-de-ying-she-qing-qiu-fang-shi">RequestMapping的映射请求方式</a><ul><li><a href="#ce-shi-dai-ma">测试代码</a></li></ul></li><li><a href="#requestmapping-ying-she-qing-qiu-can-shu-he-qing-qiu-tou">RequestMapping 映射请求参数和请求头</a></li><li><a href="#requestmapping-zhi-chi-ant-lu-jing-feng-ge">RequestMapping支持Ant路径风格</a><ul><li><a href="#shi-yan">实验</a></li></ul></li><li><a href="#reqeusetmapping-ying-she-qing-qiu-zhan-wei-fu-pathvariable-zhu-jie">ReqeusetMapping映射请求占位符PathVariable注解</a></li><li><a href="#shi-yan-1">实验</a></li></ul><!-- tocstop --></div><h2><span id="requestmapping-ying-she-qing-qiu-zhu-jie">@RequestMapping 映射请求注解</span><a href="#requestmapping-ying-she-qing-qiu-zhu-jie" class="header-anchor">$</a></h2><ul><li>SpringMVC使用@RequestMapping注解为控制器指定可以处理哪些 URL 请求</li><li>在控制器的类定义及方法定义处都可标注 @RequestMapping<ul><li>标记在类上：提供初步的请求映射信息。相对于  WEB 应用的根目录</li><li>标记在方法上：提供进一步的细分映射信息。相对于标记在类上的 URL。</li></ul></li><li>若类上未标注 @RequestMapping，则方法处标记的 URL 相对于 WEB应用的根目录<blockquote><p><strong>作用：</strong>DispatcherServlet 截获请求后，就通过控制器上 @RequestMapping 提供的映射信息确定请求所对应的处理方法。 </p></blockquote></li></ul><a id="more"></a><h2><span id="requestmapping-yuan-ma-can-kao">@RequestMapping源码参考</span><a href="#requestmapping-yuan-ma-can-kao" class="header-anchor">$</a></h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> org.springframework.web.bind.annotation;</span><br><span class="line"><span class="hljs-meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="hljs-meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="hljs-meta">@Documented</span></span><br><span class="line"><span class="hljs-meta">@Mapping</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RequestMapping &#123;</span><br><span class="line">    String[] value() <span class="hljs-keyword">default</span> &#123;&#125;;</span><br><span class="line">    RequestMethod[] method() <span class="hljs-keyword">default</span> &#123;&#125;;</span><br><span class="line">    String[] params() <span class="hljs-keyword">default</span> &#123;&#125;;</span><br><span class="line">    String[] headers() <span class="hljs-keyword">default</span> &#123;&#125;;</span><br><span class="line">    String[] consumes() <span class="hljs-keyword">default</span> &#123;&#125;;</span><br><span class="line">    String[] produces() <span class="hljs-keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="requestmapping-shi-yong-dai-ma">@RequestMapping使用代码</span><a href="#requestmapping-shi-yong-dai-ma" class="header-anchor">$</a></h2><ul><li>界面连接  <figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"springmvc/helloworld"</span>&gt;</span>test @RequestMapping<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>控制器方法  <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Controller</span>  <span class="hljs-comment">//声明Bean对象，为一个控制器组件</span></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/springmvc"</span>)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldController</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">    * 映射请求的名称：用于客户端请求；类似Struts2中action映射配置的，action名称</span></span><br><span class="line"><span class="hljs-comment">    *1 使用<span class="hljs-doctag">@RequestMapping</span> 注解来映射请求的 URL</span></span><br><span class="line"><span class="hljs-comment">    *2 返回值会通过视图解析器解析为实际的物理视图, </span></span><br><span class="line"><span class="hljs-comment">    对于 InternalResourceViewResolver 视图解析器, </span></span><br><span class="line"><span class="hljs-comment">    * 会做如下的解析:</span></span><br><span class="line"><span class="hljs-comment">    *  通过 prefix + returnVal + 后缀 这样的方式得到实际的物理视图, 然会做转发操作.</span></span><br><span class="line"><span class="hljs-comment">    * /WEB-INF/views/success.jsp</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">    <span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/helloworld"</span>)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">helloworld</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"hello,world"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>; <span class="hljs-comment">//结果如何跳转呢？需要配置映射解析器</span></span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="requestmapping-de-ying-she-qing-qiu-fang-shi">RequestMapping的映射请求方式</span><a href="#requestmapping-de-ying-she-qing-qiu-fang-shi" class="header-anchor">$</a></h2></li></ul><ol><li><p>标准的HTTP请求头<br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200216155101.png" alt></p></li><li><p>映射请求参数、请求方法或请求头</p><blockquote><p>@RequestMapping 除了可以使用请求 URL 映射请求外，还可以使用请求方法、请求参数及请求头映射请求<br>@RequestMapping 的 value【重点】、method【重点】、params【了解】 及 heads【了解】<br>分别表示请求 URL、请求方法、请求参数及请求头的映射条件，他们之间是与的关系，联合使用多个条件可让请求映射更加精确化。</p></blockquote></li><li><p>params 和 headers支持简单的表达式</p><ul><li>param1: 表示请求必须包含名为 param1 的请求参数</li><li>!param1: 表示请求不能包含名为 param1 的请求参数</li><li>param1 != value1: 表示请求包含名为 param1 的请求参数，但其值不能为 value1</li><li>{“param1=value1”, “param2”}: 请求必须包含名为 param1 和param2 的两个请求参数，且 param1 参数的值必须为 value1</li></ul></li><li><p>produces:只接受内容类型是那种类型，规则请求头的Content-Type</p></li><li><p>告诉浏览器返回的内容类型是什么，给响应头中加上Content-Type:text/html;Charset=UTF-8</p></li></ol><h3><span id="ce-shi-dai-ma">测试代码</span><a href="#ce-shi-dai-ma" class="header-anchor">$</a></h3><ol><li>定义控制器方法<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/hello"</span>, method=RequestMethod.GET)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"processing the request..."</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>以GET方法请求<figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="springmvc/testMethord"&gt;testMethord&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>出现异常</strong><br><img src="https://gitee.com//lyhcc/Images/raw/master/img/20200216160922.png" alt></p><ol start="3"><li>以POST发送请求<figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"springmvc/hello"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"submit"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2><span id="requestmapping-ying-she-qing-qiu-can-shu-he-qing-qiu-tou">RequestMapping 映射请求参数和请求头</span><a href="#requestmapping-ying-she-qing-qiu-can-shu-he-qing-qiu-tou" class="header-anchor">$</a></h2><ol><li>RequestMapping请求头&amp;请求参数<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//了解: 可以使用 params 和 headers 来更加精确的映射请求. params 和 headers 支持简单的表达式.</span></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/testParamsAndHeaders"</span>,</span><br><span class="line">params= &#123;<span class="hljs-string">"username"</span>,<span class="hljs-string">"age!=10"</span>&#125;, headers = &#123; <span class="hljs-string">"Accept-Language=en-US,zh;q=0.8"</span> &#125;)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testParamsAndHeaders</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"testParamsAndHeaders..."</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以更改Use-Agent使得只能在特定浏览器中访问</p></blockquote></li></ol><h2><span id="requestmapping-zhi-chi-ant-lu-jing-feng-ge">RequestMapping支持Ant路径风格</span><a href="#requestmapping-zhi-chi-ant-lu-jing-feng-ge" class="header-anchor">$</a></h2><ul><li>Ant风格资源支持3中匹配符【了解】<ul><li>?:匹配文件中的一个字符</li><li>*：匹配文件中任意字符</li><li>**：** 匹配多层路径</li></ul></li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/user/*/createUser</span><br><span class="line">匹配 /user/aaa/createUser、/user/bbb/createUser 等 URL</span><br><span class="line">/user/**/createUser</span><br><span class="line">匹配 /user/createUser、/user/aaa/bbb/createUser 等 URL</span><br><span class="line">/user/createUser??</span><br><span class="line">匹配 /user/createUseraa、/user/createUserbb 等 URL</span><br></pre></td></tr></table></figure><p><strong>注意：Ant风格和精确匹配同时存在，优先选择精确匹配</strong></p><h3><span id="shi-yan">实验</span><a href="#shi-yan" class="header-anchor">$</a></h3><ol><li>定义控制器方法<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//Ant 风格资源地址支持 3 种匹配符</span></span><br><span class="line"><span class="hljs-comment">//@RequestMapping(value="/testAntPath/*/abc")</span></span><br><span class="line"><span class="hljs-comment">//@RequestMapping(value="/testAntPath/**/abc")</span></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/testAntPath/abc??"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testAntPath</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="hljs-string">"testAntPath..."</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>页面链接<figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Ant 风格资源地址支持 <span class="hljs-number">3</span> 种匹配符 --&gt;</span><br><span class="line">&lt;a href="springmvc/testAntPath/*/abc"&gt;testAntPath&lt;/a&gt;</span><br><span class="line">&lt;a href="springmvc/testAntPath/xxx/yyy/abc"&gt;testAntPath&lt;/a&gt;</span><br><span class="line">&lt;a href="springmvc/testAntPath/abcxx"&gt;testAntPath&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ol><h2><span id="reqeusetmapping-ying-she-qing-qiu-zhan-wei-fu-pathvariable-zhu-jie">ReqeusetMapping映射请求占位符PathVariable注解</span><a href="#reqeusetmapping-ying-she-qing-qiu-zhan-wei-fu-pathvariable-zhu-jie" class="header-anchor">$</a></h2><blockquote><p>@PathVariable  映射 URL 绑定的占位符<br>带占位符的 URL 是 Spring3.0 新增的功能，该功能在 SpringMVC 向 REST 目标挺进发展过程中具有里程碑的意义<br>通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的入参中：<br>URL 中的 {xxx} 占位符可以通过 @PathVariable(“xxx”) 绑定到操作方法的入参中。</p></blockquote><h2><span id="shi-yan">实验</span><a href="#shi-yan" class="header-anchor">$</a></h2><ol><li>定义控制器方法<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/testPathVariable/&#123;id&#125;"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testPathVariable</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"testPathVariable...id="</span>+id);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义页面链接<figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 测试 <span class="hljs-meta">@PathVariable</span> --&gt;</span><br><span class="line">&lt;a href="springmvc/testPathVariable/1"&gt;testPathVariable&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;tocStart&quot;&gt;&lt;/div&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#requestmapping-ying-she-qing-qiu-zhu-jie&quot;&gt;@RequestMapping 映射请求注解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#requestmapping-yuan-ma-can-kao&quot;&gt;@RequestMapping源码参考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#requestmapping-shi-yong-dai-ma&quot;&gt;@RequestMapping使用代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#requestmapping-de-ying-she-qing-qiu-fang-shi&quot;&gt;RequestMapping的映射请求方式&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ce-shi-dai-ma&quot;&gt;测试代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#requestmapping-ying-she-qing-qiu-can-shu-he-qing-qiu-tou&quot;&gt;RequestMapping 映射请求参数和请求头&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#requestmapping-zhi-chi-ant-lu-jing-feng-ge&quot;&gt;RequestMapping支持Ant路径风格&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#shi-yan&quot;&gt;实验&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#reqeusetmapping-ying-she-qing-qiu-zhan-wei-fu-pathvariable-zhu-jie&quot;&gt;ReqeusetMapping映射请求占位符PathVariable注解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shi-yan-1&quot;&gt;实验&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;div class=&quot;tocEnd&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;RequestMapping-映射请求注解&quot;&gt;&lt;a href=&quot;#RequestMapping-映射请求注解&quot; class=&quot;headerlink&quot; title=&quot;@RequestMapping 映射请求注解&quot;&gt;&lt;/a&gt;@RequestMapping 映射请求注解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;SpringMVC使用@RequestMapping注解为控制器指定可以处理哪些 URL 请求&lt;/li&gt;
&lt;li&gt;在控制器的类定义及方法定义处都可标注 @RequestMapping&lt;ul&gt;
&lt;li&gt;标记在类上：提供初步的请求映射信息。相对于  WEB 应用的根目录&lt;/li&gt;
&lt;li&gt;标记在方法上：提供进一步的细分映射信息。相对于标记在类上的 URL。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若类上未标注 @RequestMapping，则方法处标记的 URL 相对于 WEB应用的根目录&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt;DispatcherServlet 截获请求后，就通过控制器上 @RequestMapping 提供的映射信息确定请求所对应的处理方法。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring MVC" scheme="https://lyhcc.github.io/categories/Spring-MVC/"/>
    
    
      <category term="SpringMVC之@RequestMapping" scheme="https://lyhcc.github.io/tags/SpringMVC%E4%B9%8B-RequestMapping/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC之HelloWorld</title>
    <link href="https://lyhcc.github.io/post/1d06ef41.html"/>
    <id>https://lyhcc.github.io/post/1d06ef41.html</id>
    <published>2020-01-23T07:21:06.045Z</published>
    <updated>2020-02-19T06:14:17.619Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#springmvc-gai-shu">SpringMVC概述</a></li><li><a href="#springmvc-shi-shi-me">SpringMVC是什么</a></li><li><a href="#yi-qian-de-mvc-he-xian-zai-de-mvc-de-qu-bie">以前的MVC和现在的MVC的区别</a></li><li><a href="#springmvc-ke-yi-gan-shi-me">SpringMVC可以干什么</a></li><li><a href="#springmvc-xu-yao-de-jar-bao">SpringMVC需要的jar包</a></li><li><a href="#springmvc-shi-xian-helloworld">SpringMVC 实现HelloWorld</a><ul><li><a href="#cao-zuo-bu-zou">操作步骤</a></li><li><a href="#helloworld-de-yun-xing-liu-cheng">HelloWorld的运行流程</a></li></ul></li><li><a href="#ru-guo-qian-duan-kong-zhi-qi-bu-zhi-ding-pei-zhi-wen-jian-wei-zhi">如果前端控制器不指定配置文件位置</a></li><li><a href="#url-pattern-shuo-ming">url-pattern说明</a></li></ul><!-- tocstop --></div><p>Servlet启动加载，Servlet原本是第一次访问创建对象<br>load-on-startup: 服务器启动的时候创建对象，值越小优先级越高</p><h2><span id="springmvc-gai-shu">SpringMVC概述</span><a href="#springmvc-gai-shu" class="header-anchor">$</a></h2><ul><li>Spring 为展现层提供的基于 MVC 设计理念的优秀的 Web  框架，是目前最主流的 MVC 框架之一。</li><li>Spring3.0 后全面超越 Struts2，成为最优秀的 MVC 框架。</li><li>Spring MVC 通过一套 MVC 注解，让 POJO（Plain Old Java Object） 成为处理请求的控制器，而无须实现任何接口。</li><li>支持 REST 风格的 URL 请求。</li><li>采用了松散耦合可插拔组件结构，比其他 MVC 框架更具扩展性和灵活性。</li></ul><a id="more"></a><h2><span id="springmvc-shi-shi-me">SpringMVC是什么</span><a href="#springmvc-shi-shi-me" class="header-anchor">$</a></h2><ol><li>一种轻量级的、基于MVC的Web层应用框架。偏前端而不是基于业务逻辑层。</li><li>是Spring框架的一个后续产品。</li></ol><ul><li>Spring框架结构图(新版本)<br>  <img src="https://cdn.jsdelivr.net/gh/lyhcc/Picture_Repository/img/20200202215534.png" alt></li><li>Spring框架结构图(老版本)：<br>  <img src="https://cdn.jsdelivr.net/gh/lyhcc/Picture_Repository/img/20200202215635.png" alt><h2><span id="yi-qian-de-mvc-he-xian-zai-de-mvc-de-qu-bie">以前的MVC和现在的MVC的区别</span><a href="#yi-qian-de-mvc-he-xian-zai-de-mvc-de-qu-bie" class="header-anchor">$</a></h2></li></ul><ol><li><p>普通MVC</p> <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MVC: 新的软件架构模式</span><br><span class="line">M： Model模型，封装和映射数据（JavaBean）</span><br><span class="line">V: View视图，界面显示工作（JSP）</span><br><span class="line">C: Controller控制器： 控制整个网站的跳转逻辑（Servlet）</span><br><span class="line">MVC提倡：每一层只编写自己的东西，不写其他任何代码</span><br><span class="line">控制器&#123;</span><br><span class="line">    调用业务逻辑处理</span><br><span class="line">    调整到某个页面</span><br><span class="line">&#125;</span><br><span class="line">分层为了解耦，解耦为了维护方便和分工合作</span><br></pre></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/lyhcc/Picture_Repository/img/20200202213625.png" alt></p></li><li><p>SpringMVC</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpringMVC多一个前端控制器，就相当于一个导诊台</span><br><span class="line"></span><br><span class="line">DispatchServlet是一个前端控制器，它是一个Servlet，</span><br><span class="line">应该在web.xml中配置这个Servlet来拦截所有请求</span><br></pre></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/lyhcc/Picture_Repository/img/20200202214520.png" alt></p></li><li><p>SpringMVC的主要控件</p></li></ol><ul><li>DispatcherServlet：前端控制器</li><li>Controller：处理器/页面控制器，做的是MVC中的C的事情，但控制逻辑转移到前端控制器了，用于对请求进行处理</li><li>HandlerMapping ：请求映射到处理器，找谁来处理，如果映射成功返回一个HandlerExecutiongChain对象（包含一个Handler处理器(页面控制器)对象、多个HandlerInterceptor拦截器对象） </li><li>ViewResolver : 视图解析器，找谁来处理返回的页面。把逻辑视图解析为具体的View,进行这种策略模式，很容易更换其他视图技术；<ul><li>如InternalResourceViewResolver将逻辑视图名映射为JSP视图</li></ul></li><li>LocalResolver：本地化、国际化</li><li>MultipartResolver：文件上传解析器</li><li>HandlerExceptionResolver：异常处理器<h2><span id="springmvc-ke-yi-gan-shi-me">SpringMVC可以干什么</span><a href="#springmvc-ke-yi-gan-shi-me" class="header-anchor">$</a></h2></li><li>天生与Spring框架集成，如：(IOC,AOP)</li><li>支持Restful风格</li><li>进行更简洁的Web层开发</li><li>支持灵活的URL到页面控制器的映射</li><li>非常容易与其他视图技术集成，如:Velocity、FreeMarker等等。</li><li>因为模型数据不存放在特定的API里，而是放在一个Model里(Map数据结构实现，因此很容易被其他框架使用)</li><li>非常灵活的数据验证、格式化和数据绑定机制、能使用任何对象进行数据绑定，不必实现特定框架的API</li><li>更加简单、强大的异常处理</li><li>对静态资源的支持</li><li>支持灵活的本地化、主题等解析</li></ul><h2><span id="springmvc-xu-yao-de-jar-bao">SpringMVC需要的jar包</span><a href="#springmvc-xu-yao-de-jar-bao" class="header-anchor">$</a></h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring-webmvc-4.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure><h2><span id="springmvc-shi-xian-helloworld">SpringMVC 实现HelloWorld</span><a href="#springmvc-shi-xian-helloworld" class="header-anchor">$</a></h2><h3><span id="cao-zuo-bu-zou">操作步骤</span><a href="#cao-zuo-bu-zou" class="header-anchor">$</a></h3><ol><li>eclipse console配置（可以不配置）<ol><li>切换JavaEE视图</li><li>在Quick Access中找Package explore</li><li>调整custom perspective，使得鼠标邮件可以找到并创建</li><li>新建工作集</li></ol></li><li>创建动态web工程<ol><li>如果选择Dynamic web module version为3.0则需要自己创建web.xml或点击下一步勾选生成，2.5则不需要</li><li>创建Tomcat运行环境，并引入Tomcat环境</li></ol></li><li>导包<ol><li>SpringMVC是Spring的Web模块，所有模块的运行都依赖于核心模块（IOC模块）<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring-aop-4.0.0.RELEASE.jar</span><br><span class="line">spring-beans-4.0.0.RELEASE.jar</span><br><span class="line">spring-context-4.0.0.RELEASE.jar</span><br><span class="line">spring-core-4.0.0.RELEASE.jar</span><br><span class="line">spring-expression-4.0.0.RELEASE.jar</span><br><span class="line">commons-logging-1.1.3.jar</span><br><span class="line">spring-web-4.0.0.RELEASE.jar</span><br><span class="line">spring-webmvc-4.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure></li></ol></li><li>在 web.xml 中配置 DispatcherServlet(ALT+/) <figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">       <span class="hljs-comment">&lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- SpringMVC 配置文件的位置 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!--</span></span><br><span class="line"><span class="hljs-comment">Servlet启动加载，Servlet原本是第一次访问创建对象</span></span><br><span class="line"><span class="hljs-comment">load-on-startup: 服务器启动的时候创建对象，值越小优先级越高</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- Map all requests to the DispatcherServlet for handling --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>加入 Spring MVC 的配置文件：springmvc.xml<ol><li>添加命名空间<br> <img src="https://cdn.jsdelivr.net/gh/lyhcc/Picture_Repository/img/20200202232644.png" alt></li><li>增加配置 <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:component-scan base-package=&quot;xyz.lyhcc&quot;&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure></li><li>配置视图解析器 <figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"viewResolver"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/views/"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li>需要创建一个入口页面，index.jsp(创建之前，修改JSP文件配置为UTF-8:菜单栏Windows-&gt;Preference-&gt;搜索JSP-&gt;修改编码)<figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"$&#123;pageContext.request.contextPath &#125;/helloworld"</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写处理请求的处理器，并标识为处理器 <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Controller</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/hello"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"processing the request..."</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写视图/WEB-INF/views/success.jsp<figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Sucess Page<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>部署测试：</li></ol><h3><span id="helloworld-de-yun-xing-liu-cheng">HelloWorld的运行流程</span><a href="#helloworld-de-yun-xing-liu-cheng" class="header-anchor">$</a></h3><ol><li>客户端点击链接发送<a href="http://localhost:8080/springmvc/hello" target="_blank" rel="noopener">http://localhost:8080/springmvc/hello</a></li><li>来到Tomcat服务器</li><li>SpringMVC的前端控制器收到所有请求</li><li>来看请求地址和@RequestMapping标注匹配，来找到相应的方法</li><li>前端控制找到目标处理器类和目标方法，直接利用返回执行目标方法</li><li>方法执行完成会有返回值，SpringMVC认为这个返回值就是要去的地址</li><li>拿到方法返回值以后，用视图解析器进行拼串得到完整的页面地址</li><li>拿到页面地址，前端控制器帮我们转发到页面</li></ol><h2><span id="ru-guo-qian-duan-kong-zhi-qi-bu-zhi-ding-pei-zhi-wen-jian-wei-zhi">如果前端控制器不指定配置文件位置</span><a href="#ru-guo-qian-duan-kong-zhi-qi-bu-zhi-ding-pei-zhi-wen-jian-wei-zhi" class="header-anchor">$</a></h2><blockquote><p>会去寻找默认的文件 前端控制器名-servlet.xml</p></blockquote><h2><span id="url-pattern-shuo-ming">url-pattern说明</span><a href="#url-pattern-shuo-ming" class="header-anchor">$</a></h2><hr><ol><li>/: 拦截所有请求，不拦截jsp页面*.jsp</li><li>/*:拦截所有请求，包括jsp</li></ol><blockquote><p>处理*.jsp是Tomcat做的事，所有项目的小web.xml都是集成大的web.xml<br>DefaultServlet是Tomcat周玲处理静态资源的，除了jsp,Servlet外都是静态资源    </p><p>1) 服务器的大的web.xml中有一个DefaultServlet的url-pattern=/<br>2) 自定义的配置中前端控制器url-pattern=/</p><blockquote><p>这样就会禁用父web.xml，静态资源就会来到DispatchServlet，看那个方法的RequestMapping是这个，所以此时的html会报错<br>3) jsp可以访问是因为没有覆盖父web.xml的jspServlet<br>4) /* 直接拦截所有请求，一般写/;也是为了迎合后来Rest风格的URL</p></blockquote></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;tocStart&quot;&gt;&lt;/div&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#springmvc-gai-shu&quot;&gt;SpringMVC概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#springmvc-shi-shi-me&quot;&gt;SpringMVC是什么&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#yi-qian-de-mvc-he-xian-zai-de-mvc-de-qu-bie&quot;&gt;以前的MVC和现在的MVC的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#springmvc-ke-yi-gan-shi-me&quot;&gt;SpringMVC可以干什么&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#springmvc-xu-yao-de-jar-bao&quot;&gt;SpringMVC需要的jar包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#springmvc-shi-xian-helloworld&quot;&gt;SpringMVC 实现HelloWorld&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#cao-zuo-bu-zou&quot;&gt;操作步骤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#helloworld-de-yun-xing-liu-cheng&quot;&gt;HelloWorld的运行流程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ru-guo-qian-duan-kong-zhi-qi-bu-zhi-ding-pei-zhi-wen-jian-wei-zhi&quot;&gt;如果前端控制器不指定配置文件位置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#url-pattern-shuo-ming&quot;&gt;url-pattern说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;div class=&quot;tocEnd&quot;&gt;&lt;/div&gt;




&lt;p&gt;Servlet启动加载，Servlet原本是第一次访问创建对象&lt;br&gt;load-on-startup: 服务器启动的时候创建对象，值越小优先级越高&lt;/p&gt;
&lt;h2 id=&quot;SpringMVC概述&quot;&gt;&lt;a href=&quot;#SpringMVC概述&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC概述&quot;&gt;&lt;/a&gt;SpringMVC概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Spring 为展现层提供的基于 MVC 设计理念的优秀的 Web  框架，是目前最主流的 MVC 框架之一。&lt;/li&gt;
&lt;li&gt;Spring3.0 后全面超越 Struts2，成为最优秀的 MVC 框架。&lt;/li&gt;
&lt;li&gt;Spring MVC 通过一套 MVC 注解，让 POJO（Plain Old Java Object） 成为处理请求的控制器，而无须实现任何接口。&lt;/li&gt;
&lt;li&gt;支持 REST 风格的 URL 请求。&lt;/li&gt;
&lt;li&gt;采用了松散耦合可插拔组件结构，比其他 MVC 框架更具扩展性和灵活性。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring MVC" scheme="https://lyhcc.github.io/categories/Spring-MVC/"/>
    
    
      <category term="SpringMVC之HelloWorld" scheme="https://lyhcc.github.io/tags/SpringMVC%E4%B9%8BHelloWorld/"/>
    
  </entry>
  
</feed>
